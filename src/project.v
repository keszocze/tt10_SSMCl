// Â© 2025 Technical University of Denmark
/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.8.2. DO NOT MODIFY.
*/
`default_nettype none
module tt_um_keszocze_ssmcl
    ( // Inputs
      input wire [7:0] ui_in
    , output wire [7:0] uo_out
    , input wire [7:0] uio_in
    , output wire [7:0] uio_out
    , output wire [7:0] uio_oe
    , input wire  ena // enable
    , input wire  clk // clock
    , input wire  rst_n // reset
    );
  wire [0:0] c$ds_app_arg;
  wire [3:0] ds;
  wire [12:0] c$case_alt;
  wire [12:0] c$case_alt_0;
  wire [4:0] c$app_arg;
  wire [1:0] c$app_arg_0;
  wire  c$app_arg_1;
  wire [1:0] result_0;
  reg [10:0] s = {1'b1,   3'b000,   2'd0,   5'd0};
  wire [3:0] ds_0;
  wire [0:0] a1;
  wire [0:0] c$ds_app_arg_0;
  wire [3:0] ds_1;
  wire [12:0] c$case_alt_1;
  wire [12:0] c$case_alt_2;
  wire [4:0] c$app_arg_2;
  wire [1:0] c$app_arg_3;
  wire  c$app_arg_4;
  wire [1:0] result_1;
  reg [10:0] s_0 = {1'b1,   3'b000,   2'd0,   5'd0};
  wire [3:0] ds_2;
  wire [0:0] a1_0;
  reg [23:0] c$ds_app_arg_1 = {2'd0,   3'b000,   3'b000,   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0},
 6'b000000,   3'b000,   1'b0};
  wire [1:0] result_2;
  reg [25:0] result_3;
  wire [25:0] c$case_alt_3;
  wire [25:0] c$case_alt_4;
  wire [5:0] c$app_arg_5;
  wire  c$app_arg_6;
  wire [2:0] c$app_arg_7;
  wire [2:0] c$case_alt_5;
  wire [2:0] c$case_alt_6;
  wire [5:0] c$app_arg_8;
  wire [5:0] c$case_alt_7;
  wire [5:0] c$case_alt_8;
  wire [5:0] c$app_arg_9;
  wire [5:0] c$case_alt_9;
  wire [5:0] c$case_alt_10;
  wire [5:0] c$case_alt_11;
  wire [5:0] c$case_alt_12;
  wire [5:0] c$app_arg_10;
  wire  cOut;
  wire [5:0] c$app_arg_11;
  wire [5:0] c$app_arg_12;
  wire  c$app_arg_13;
  wire [2:0] c$app_arg_14;
  wire [2:0] c$app_arg_15;
  wire [1:0] c$app_arg_16;
  wire [1:0] c$case_alt_13;
  wire  xDone;
  wire  sharedLogic;
  wire  aIn;
  wire  bIn;
  wire  c$case_scrut;
  wire [5:0] c$app_arg_17;
  wire [25:0] c$case_alt_14;
  wire  start;
  reg [2:0] result_4;
  reg [2:0] result_5;
  reg [12:0] c$ds_app_arg_2 = {1'b0,   1'b0,   5'b00000,   6'b000000};
  wire [6:0] result_6;
  wire [19:0] result_7;
  wire [19:0] result_8;
  wire [4:0] _counter;
  wire [19:0] c$case_alt_15;
  wire  valid;
  reg [5:0] result_9;
  wire [6:0] c$_tupIn;
  wire [5:0] currVal;
  wire  _inputBit;
  wire [0:0] c$ds_app_arg_3;
  wire [6:0] result_10;
  wire [6:0] ds_3;
  wire  a1_1;
  wire [5:0] b1;
  wire [0:0] a1_2;
  wire [5:0] b1_0;
  wire [0:0] c$app_arg_18;
  wire  a3;
  wire [5:0] a5;
  wire [7:0] result_11;
  wire [2:0] eta2;
  reg [16:0] c$ds_app_arg_4 = {2'd0,   2'b00,   2'b00,   {1'b0,   1'b0,   1'b0,   1'b0},   4'b0000,   2'b00,
 1'b0};
  wire [1:0] result_12;
  reg [18:0] result_13;
  wire [18:0] c$case_alt_16;
  wire [18:0] c$case_alt_17;
  wire [3:0] c$app_arg_19;
  wire  c$app_arg_20;
  wire [1:0] c$app_arg_21;
  wire [1:0] c$case_alt_18;
  wire [1:0] c$case_alt_19;
  wire [3:0] c$app_arg_22;
  wire [3:0] c$case_alt_20;
  wire [3:0] c$case_alt_21;
  wire [3:0] c$app_arg_23;
  wire [3:0] c$case_alt_22;
  wire [3:0] c$case_alt_23;
  wire [3:0] c$case_alt_24;
  wire [3:0] c$case_alt_25;
  wire [3:0] c$app_arg_24;
  wire  cOut_0;
  wire [3:0] c$app_arg_25;
  wire [3:0] c$app_arg_26;
  wire  c$app_arg_27;
  wire [1:0] c$app_arg_28;
  wire [1:0] c$app_arg_29;
  wire [1:0] c$app_arg_30;
  wire [1:0] c$case_alt_26;
  wire  xDone_0;
  wire  sharedLogic_0;
  wire  aIn_0;
  wire  bIn_0;
  wire  c$case_scrut_0;
  wire [3:0] c$app_arg_31;
  wire [18:0] c$case_alt_27;
  wire  start_0;
  reg [1:0] result_14;
  reg [1:0] result_15;
  wire [2:0] eta2_0;
  reg [23:0] c$ds_app_arg_5 = {2'd0,   3'b000,   3'b000,   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0},
 6'b000000,   3'b000,   1'b0};
  wire [1:0] result_16;
  reg [25:0] result_17;
  wire [25:0] c$case_alt_28;
  wire [25:0] c$case_alt_29;
  wire [5:0] c$app_arg_32;
  wire  c$app_arg_33;
  wire [2:0] c$app_arg_34;
  wire [2:0] c$case_alt_30;
  wire [2:0] c$case_alt_31;
  wire [5:0] c$app_arg_35;
  wire [5:0] c$case_alt_32;
  wire [5:0] c$case_alt_33;
  wire [5:0] c$app_arg_36;
  wire [5:0] c$case_alt_34;
  wire [5:0] c$case_alt_35;
  wire [5:0] c$case_alt_36;
  wire [5:0] c$case_alt_37;
  wire [5:0] c$app_arg_37;
  wire  cOut_1;
  wire [5:0] c$app_arg_38;
  wire [5:0] c$app_arg_39;
  wire  c$app_arg_40;
  wire [2:0] c$app_arg_41;
  wire [2:0] c$app_arg_42;
  wire [1:0] c$app_arg_43;
  wire [1:0] c$case_alt_38;
  wire  xDone_1;
  wire  sharedLogic_1;
  wire  aIn_1;
  wire  bIn_1;
  wire  c$case_scrut_1;
  wire [5:0] c$app_arg_44;
  wire [25:0] c$case_alt_39;
  wire  start_1;
  reg [2:0] result_18;
  reg [2:0] result_19;
  wire [2:0] eta2_1;
  reg [30:0] c$ds_app_arg_6 = {2'd0,   4'b0000,   4'b0000,   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                1'b0,   1'b0},   8'b00000000,   4'b0000,   1'b0};
  wire [1:0] result_20;
  reg [32:0] result_21;
  wire [32:0] c$case_alt_40;
  wire [32:0] c$case_alt_41;
  wire [7:0] c$app_arg_45;
  wire  c$app_arg_46;
  wire [3:0] c$app_arg_47;
  wire [3:0] c$case_alt_42;
  wire [3:0] c$case_alt_43;
  wire [7:0] c$app_arg_48;
  wire [7:0] c$case_alt_44;
  wire [7:0] c$case_alt_45;
  wire [7:0] c$app_arg_49;
  wire [7:0] c$case_alt_46;
  wire [7:0] c$case_alt_47;
  wire [7:0] c$case_alt_48;
  wire [7:0] c$case_alt_49;
  wire [7:0] c$app_arg_50;
  wire  cOut_2;
  wire [7:0] c$app_arg_51;
  wire [7:0] c$app_arg_52;
  wire  c$app_arg_53;
  wire [3:0] c$app_arg_54;
  wire [3:0] c$app_arg_55;
  wire [1:0] c$app_arg_56;
  wire [1:0] c$case_alt_50;
  wire  xDone_2;
  wire  sharedLogic_2;
  wire  aIn_2;
  wire  bIn_2;
  wire  c$case_scrut_2;
  wire [7:0] c$app_arg_57;
  wire [32:0] c$case_alt_51;
  wire  start_2;
  reg [3:0] result_22;
  reg [3:0] result_23;
  wire [2:0] eta2_2;
  reg [37:0] c$ds_app_arg_7 = {2'd0,   5'b00000,   5'b00000,   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                  1'b0,   1'b0,   1'b0,   1'b0},
 10'b0000000000,   5'b00000,   1'b0};
  wire [1:0] result_24;
  reg [39:0] result_25;
  wire [39:0] c$case_alt_52;
  wire [39:0] c$case_alt_53;
  wire [9:0] c$app_arg_58;
  wire  c$app_arg_59;
  wire [4:0] c$app_arg_60;
  wire [4:0] c$case_alt_54;
  wire [4:0] c$case_alt_55;
  wire [9:0] c$app_arg_61;
  wire [9:0] c$case_alt_56;
  wire [9:0] c$case_alt_57;
  wire [9:0] c$app_arg_62;
  wire [9:0] c$case_alt_58;
  wire [9:0] c$case_alt_59;
  wire [9:0] c$case_alt_60;
  wire [9:0] c$case_alt_61;
  wire [9:0] c$app_arg_63;
  wire  cOut_3;
  wire [9:0] c$app_arg_64;
  wire [9:0] c$app_arg_65;
  wire  c$app_arg_66;
  wire [4:0] c$app_arg_67;
  wire [4:0] c$app_arg_68;
  wire [1:0] c$app_arg_69;
  wire [1:0] c$case_alt_62;
  wire  xDone_3;
  wire  sharedLogic_3;
  wire  aIn_3;
  wire  bIn_3;
  wire  c$case_scrut_3;
  wire [9:0] c$app_arg_70;
  wire [39:0] c$case_alt_63;
  wire  start_3;
  reg [4:0] result_26;
  reg [4:0] result_27;
  wire [2:0] eta2_3;
  reg [58:0] c$ds_app_arg_8 = {2'd0,   8'b00000000,   8'b00000000,   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                        1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                        1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                        1'b0},   16'b0000000000000000,
 8'b00000000,   1'b0};
  wire [1:0] result_28;
  reg [60:0] result_29;
  wire [60:0] c$case_alt_64;
  wire [60:0] c$case_alt_65;
  wire [15:0] c$app_arg_71;
  wire  c$app_arg_72;
  wire [7:0] c$app_arg_73;
  wire [7:0] c$case_alt_66;
  wire [7:0] c$case_alt_67;
  wire [15:0] c$app_arg_74;
  wire [15:0] c$case_alt_68;
  wire [15:0] c$case_alt_69;
  wire [15:0] c$app_arg_75;
  wire [15:0] c$case_alt_70;
  wire [15:0] c$case_alt_71;
  wire [15:0] c$case_alt_72;
  wire [15:0] c$case_alt_73;
  wire [15:0] c$app_arg_76;
  wire  cOut_4;
  wire [15:0] c$app_arg_77;
  wire [15:0] c$app_arg_78;
  wire  c$app_arg_79;
  wire [7:0] c$app_arg_80;
  wire [7:0] c$app_arg_81;
  wire [1:0] c$app_arg_82;
  wire [1:0] c$case_alt_74;
  wire  xDone_4;
  wire  sharedLogic_4;
  wire  aIn_4;
  wire  bIn_4;
  wire  c$case_scrut_4;
  wire [15:0] c$app_arg_83;
  wire [60:0] c$case_alt_75;
  wire  start_4;
  reg [7:0] result_30;
  reg [7:0] result_31;
  wire [2:0] eta2_4;
  reg [72:0] c$ds_app_arg_9 = {2'd0,   10'b0000000000,   10'b0000000000,   {1'b0,   1'b0,   1'b0,   1'b0,
                                              1'b0,   1'b0,   1'b0,   1'b0,
                                              1'b0,   1'b0,   1'b0,   1'b0,
                                              1'b0,   1'b0,   1'b0,   1'b0,
                                              1'b0,   1'b0,   1'b0,   1'b0},
 20'b00000000000000000000,   10'b0000000000,   1'b0};
  wire [1:0] result_32;
  reg [74:0] result_33;
  wire [74:0] c$case_alt_76;
  wire [74:0] c$case_alt_77;
  wire [19:0] c$app_arg_84;
  wire  c$app_arg_85;
  wire [9:0] c$app_arg_86;
  wire [9:0] c$case_alt_78;
  wire [9:0] c$case_alt_79;
  wire [19:0] c$app_arg_87;
  wire [19:0] c$case_alt_80;
  wire [19:0] c$case_alt_81;
  wire [19:0] c$app_arg_88;
  wire [19:0] c$case_alt_82;
  wire [19:0] c$case_alt_83;
  wire [19:0] c$case_alt_84;
  wire [19:0] c$case_alt_85;
  wire [19:0] c$app_arg_89;
  wire  cOut_5;
  wire [19:0] c$app_arg_90;
  wire [19:0] c$app_arg_91;
  wire  c$app_arg_92;
  wire [9:0] c$app_arg_93;
  wire [9:0] c$app_arg_94;
  wire [1:0] c$app_arg_95;
  wire [1:0] c$case_alt_86;
  wire  xDone_5;
  wire  sharedLogic_5;
  wire  aIn_5;
  wire  bIn_5;
  wire  c$case_scrut_5;
  wire [19:0] c$app_arg_96;
  wire [74:0] c$case_alt_87;
  wire  start_5;
  reg [9:0] result_34;
  reg [9:0] result_35;
  wire [2:0] eta2_5;
  reg [86:0] c$ds_app_arg_10 = {2'd0,   12'b000000000000,   12'b000000000000,   {1'b0,   1'b0,   1'b0,   1'b0,
                                                  1'b0,   1'b0,   1'b0,   1'b0,
                                                  1'b0,   1'b0,   1'b0,   1'b0,
                                                  1'b0,   1'b0,   1'b0,   1'b0,
                                                  1'b0,   1'b0,   1'b0,   1'b0,
                                                  1'b0,   1'b0,   1'b0,
                                                  1'b0},
 24'b000000000000000000000000,   12'b000000000000,   1'b0};
  wire [1:0] result_36;
  reg [88:0] result_37;
  wire [88:0] c$case_alt_88;
  wire [88:0] c$case_alt_89;
  wire [23:0] c$app_arg_97;
  wire  c$app_arg_98;
  wire [11:0] c$app_arg_99;
  wire [11:0] c$case_alt_90;
  wire [11:0] c$case_alt_91;
  wire [23:0] c$app_arg_100;
  wire [23:0] c$case_alt_92;
  wire [23:0] c$case_alt_93;
  wire [23:0] c$app_arg_101;
  wire [23:0] c$case_alt_94;
  wire [23:0] c$case_alt_95;
  wire [23:0] c$case_alt_96;
  wire [23:0] c$case_alt_97;
  wire [23:0] c$app_arg_102;
  wire  cOut_6;
  wire [23:0] c$app_arg_103;
  wire [23:0] c$app_arg_104;
  wire  c$app_arg_105;
  wire [11:0] c$app_arg_106;
  wire [11:0] c$app_arg_107;
  wire [1:0] c$app_arg_108;
  wire [1:0] c$case_alt_98;
  wire  xDone_6;
  wire  sharedLogic_6;
  wire  aIn_6;
  wire  bIn_6;
  wire  c$case_scrut_6;
  wire [23:0] c$app_arg_109;
  wire [88:0] c$case_alt_99;
  wire  start_6;
  reg [11:0] result_38;
  reg [11:0] result_39;
  wire [2:0] eta2_6;
  reg [114:0] c$ds_app_arg_11 = {2'd0,   16'b0000000000000000,   16'b0000000000000000,   {1'b0,   1'b0,   1'b0,
                                                          1'b0,   1'b0,   1'b0,
                                                          1'b0,   1'b0,   1'b0,
                                                          1'b0,   1'b0,   1'b0,
                                                          1'b0,   1'b0,   1'b0,
                                                          1'b0,   1'b0,   1'b0,
                                                          1'b0,   1'b0,   1'b0,
                                                          1'b0,   1'b0,   1'b0,
                                                          1'b0,   1'b0,   1'b0,
                                                          1'b0,   1'b0,   1'b0,
                                                          1'b0,   1'b0},
 32'b00000000000000000000000000000000,   16'b0000000000000000,   1'b0};
  wire [1:0] result_40;
  reg [116:0] result_41;
  wire [116:0] c$case_alt_100;
  wire [116:0] c$case_alt_101;
  wire [31:0] c$app_arg_110;
  wire  c$app_arg_111;
  wire [15:0] c$app_arg_112;
  wire [15:0] c$case_alt_102;
  wire [15:0] c$case_alt_103;
  wire [31:0] c$app_arg_113;
  wire [31:0] c$case_alt_104;
  wire [31:0] c$case_alt_105;
  wire [31:0] c$app_arg_114;
  wire [31:0] c$case_alt_106;
  wire [31:0] c$case_alt_107;
  wire [31:0] c$case_alt_108;
  wire [31:0] c$case_alt_109;
  wire [31:0] c$app_arg_115;
  wire  cOut_7;
  wire [31:0] c$app_arg_116;
  wire [31:0] c$app_arg_117;
  wire  c$app_arg_118;
  wire [15:0] c$app_arg_119;
  wire [15:0] c$app_arg_120;
  wire [1:0] c$app_arg_121;
  wire [1:0] c$case_alt_110;
  wire  xDone_7;
  wire  sharedLogic_7;
  wire  aIn_7;
  wire  bIn_7;
  wire  c$case_scrut_7;
  wire [31:0] c$app_arg_122;
  wire [116:0] c$case_alt_111;
  wire  start_7;
  reg [15:0] result_42;
  reg [15:0] result_43;
  wire [1:0] result_44;
  wire  a3_0;
  wire  a4;
  wire [0:0] c$app_arg_123;
  wire [7:0] result_45;
  wire [6:0] c$ds1_case_alt;
  wire [5:0] c$ds2_case_alt;
  wire [7:0] result_46;
  wire [7:0] ds_4;
  wire [6:0] b;
  wire [5:0] b_0;
  wire [0:0] a4_0;
  wire [0:0] a3_1;
  wire [2:0] a1_3;
  wire [2:0] b1_1;
  wire [5:0] c$ds1_case_alt_0;
  wire [2:0] c$ds2_case_alt_0;
  wire [1:0] c$ds3_case_alt;
  wire [7:0] result_47;
  wire [7:0] ds_5;
  wire [5:0] b_1;
  wire [2:0] b_2;
  wire [1:0] b_3;
  wire [0:0] a3_2;
  wire [0:0] a1_4;
  wire [0:0] b1_2;
  wire [2:0] selMult;
  wire  xBit;
  wire  yBit;
  wire [2:0] c$bv;
  wire [2:0] c$bv_0;
  wire [2:0] c$bv_1;
  wire [2:0] c$bv_2;
  wire [1:0] result_selection_1;
  wire [5:0] c$vec;
  wire [5:0] c$vec_0;
  wire [2:0] c$bv_3;
  wire [2:0] c$bv_4;
  wire [2:0] c$bv_5;
  wire [5:0] c$vec_1;
  wire [5:0] c$bv_6;
  wire  c$din;
  wire  c$din_0;
  wire  c$din_1;
  wire [1:0] result_selection_7;
  wire [3:0] c$vec_2;
  wire [3:0] c$vec_3;
  wire [1:0] c$bv_7;
  wire [1:0] c$bv_8;
  wire [1:0] c$bv_9;
  wire [3:0] c$vec_4;
  wire [3:0] c$bv_10;
  wire  c$din_2;
  wire  c$din_3;
  wire [1:0] result_selection_10;
  wire [5:0] c$vec_5;
  wire [5:0] c$vec_6;
  wire [2:0] c$bv_11;
  wire [2:0] c$bv_12;
  wire [2:0] c$bv_13;
  wire [5:0] c$vec_7;
  wire [5:0] c$bv_14;
  wire  c$din_4;
  wire  c$din_5;
  wire [1:0] result_selection_13;
  wire [7:0] c$vec_8;
  wire [7:0] c$vec_9;
  wire [3:0] c$bv_15;
  wire [3:0] c$bv_16;
  wire [3:0] c$bv_17;
  wire [7:0] c$vec_10;
  wire [7:0] c$bv_18;
  wire  c$din_6;
  wire  c$din_7;
  wire [1:0] result_selection_16;
  wire [9:0] c$vec_11;
  wire [9:0] c$vec_12;
  wire [4:0] c$bv_19;
  wire [4:0] c$bv_20;
  wire [4:0] c$bv_21;
  wire [9:0] c$vec_13;
  wire [9:0] c$bv_22;
  wire  c$din_8;
  wire  c$din_9;
  wire [1:0] result_selection_19;
  wire [15:0] c$vec_14;
  wire [15:0] c$vec_15;
  wire [7:0] c$bv_23;
  wire [7:0] c$bv_24;
  wire [7:0] c$bv_25;
  wire [15:0] c$vec_16;
  wire [15:0] c$bv_26;
  wire  c$din_10;
  wire  c$din_11;
  wire [1:0] result_selection_22;
  wire [19:0] c$vec_17;
  wire [19:0] c$vec_18;
  wire [9:0] c$bv_27;
  wire [9:0] c$bv_28;
  wire [9:0] c$bv_29;
  wire [19:0] c$vec_19;
  wire [19:0] c$bv_30;
  wire  c$din_12;
  wire  c$din_13;
  wire [1:0] result_selection_25;
  wire [23:0] c$vec_20;
  wire [23:0] c$vec_21;
  wire [11:0] c$bv_31;
  wire [11:0] c$bv_32;
  wire [11:0] c$bv_33;
  wire [23:0] c$vec_22;
  wire [23:0] c$bv_34;
  wire  c$din_14;
  wire  c$din_15;
  wire [1:0] result_selection_28;
  wire [31:0] c$vec_23;
  wire [31:0] c$vec_24;
  wire [15:0] c$bv_35;
  wire [15:0] c$bv_36;
  wire [15:0] c$bv_37;
  wire [31:0] c$vec_25;
  wire [31:0] c$bv_38;
  wire  c$din_16;
  wire  c$din_17;
  wire [15:0] c$vecFlat;
  wire [23:0] result;

  assign c$ds_app_arg = result_46[7:7] ? 1'b1 : 1'b0;

  assign ds = {a1 == 1'b1,   ds_0[2:0]};

  assign c$bv = (s[9:7]);

  assign c$case_alt = s[10:10] ? c$case_alt_0 : {{c$app_arg_1,
                                                  s[9:7] >> (64'sd1),   c$app_arg_0,
                                                  c$app_arg},   {~ (s[6:5] == 2'd0),
                                                                  c$bv[0] }};

  assign c$bv_0 = (ds[2:0]);

  assign c$case_alt_0 = ds[3:3] ? {{1'b0,
                                    ds[2:0] >> (64'sd1),   2'd2,   5'd16},
                                   {1'b1,    c$bv_0[0] }} : {s,   {1'b0,   1'b0}};

  assign c$app_arg = c$app_arg_1 ? s[4:0] : (s[4:0] - 5'd1);

  assign c$app_arg_0 = (s[6:5] > 2'd0) ? (s[6:5] - 2'd1) : 2'd0;

  assign c$app_arg_1 = s[4:0] == 5'd0;

  assign result_0 = c$case_alt[1:0];

  // register begin
  always @(posedge clk or  negedge  rst_n) begin : s_register
    if ( ! rst_n) begin
      s <= {1'b1,   3'b000,   2'd0,   5'd0};
    end else if (ena) begin
      s <= c$case_alt[12:2];
    end
  end
  // register end

  assign ds_0 = (({(c$ds_app_arg),((result_46[5:3]))}));

  assign a1 = ds_0[3:3];

  assign c$ds_app_arg_0 = result_46[7:7] ? 1'b1 : 1'b0;

  assign ds_1 = {a1_0 == 1'b1,   ds_2[2:0]};

  assign c$bv_1 = (s_0[9:7]);

  assign c$case_alt_1 = s_0[10:10] ? c$case_alt_2 : {{c$app_arg_4,
                                                      s_0[9:7] >> (64'sd1),   c$app_arg_3,
                                                      c$app_arg_2},   {~ (s_0[6:5] == 2'd0),
                                                                        c$bv_1[0] }};

  assign c$bv_2 = (ds_1[2:0]);

  assign c$case_alt_2 = ds_1[3:3] ? {{1'b0,
                                      ds_1[2:0] >> (64'sd1),   2'd2,   5'd16},
                                     {1'b1,    c$bv_2[0] }} : {s_0,   {1'b0,
                                                                       1'b0}};

  assign c$app_arg_2 = c$app_arg_4 ? s_0[4:0] : (s_0[4:0] - 5'd1);

  assign c$app_arg_3 = (s_0[6:5] > 2'd0) ? (s_0[6:5] - 2'd1) : 2'd0;

  assign c$app_arg_4 = s_0[4:0] == 5'd0;

  assign result_1 = c$case_alt_1[1:0];

  // register begin
  always @(posedge clk or  negedge  rst_n) begin : s_0_register
    if ( ! rst_n) begin
      s_0 <= {1'b1,   3'b000,   2'd0,   5'd0};
    end else if (ena) begin
      s_0 <= c$case_alt_1[12:2];
    end
  end
  // register end

  assign ds_2 = (({(c$ds_app_arg_0),((result_46[2:0]))}));

  assign a1_0 = ds_2[3:3];

  // register begin
  always @(posedge clk or  negedge  rst_n) begin : c$ds_app_arg_1_register
    if ( ! rst_n) begin
      c$ds_app_arg_1 <= {2'd0,   3'b000,   3'b000,   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0},
   6'b000000,   3'b000,   1'b0};
    end else if (ena) begin
      c$ds_app_arg_1 <= result_3[25:2];
    end
  end
  // register end

  assign result_2 = result_3[1:0];

  assign result_selection_1 = c$ds_app_arg_1[23:22];

  always @(*) begin
    case(result_selection_1)
      2'b00 : result_3 = c$case_alt_14;
      2'b01 : result_3 = c$case_alt_4;
      2'b10 : result_3 = {{c$app_arg_16,
                           c$app_arg_15,   c$app_arg_14,   c$app_arg_9,
                           c$app_arg_8,   c$app_arg_7,   c$app_arg_6},
                          {1'b0,   1'b0}};
      default : result_3 = c$case_alt_3;
    endcase
  end

  assign c$case_alt_3 = c$case_scrut ? {{2'd0,
                                         3'b000,   3'b000,   {6 {1'b0}},   6'b000000,
                                         3'b000,   1'b0},   {1'b1,   bIn}} : {{2'd3,
                                                                               c$ds_app_arg_1[21:19],
                                                                               c$ds_app_arg_1[18:16],   c$app_arg_5,
                                                                               c$app_arg_17,   c$ds_app_arg_1[3:1],
                                                                               c$ds_app_arg_1[0:0]},   {1'b1,   bIn}};

  assign c$case_alt_4 = c$case_scrut ? {{2'd2,
                                         result_5,   result_4,   c$ds_app_arg_1[15:10],
                                         6'b000100,   3'b100,   c$ds_app_arg_1[0:0]},
                                        {1'b0,   1'b0}} : {{2'd1,   result_5,
                                                            result_4,   c$ds_app_arg_1[15:10],
                                                            c$app_arg_17,   c$ds_app_arg_1[3:1],
                                                            c$ds_app_arg_1[0:0]},   {1'b0,   1'b0}};

  assign c$vec = c$ds_app_arg_1[15:10];

  // rotateLeftS begin
  localparam shift_amount = 1 % 6;

  generate
  if (shift_amount == 0) begin : no_shift
    assign c$app_arg_5 = c$vec;
  end else begin : do_shift
    assign c$app_arg_5 = {c$vec[((6-shift_amount)*1)-1 : 0]
                     ,c$vec[6-1 : (6-shift_amount)*1]
                     };
  end
  endgenerate
  // rotateLeftS end

  assign c$app_arg_6 = xDone ? 1'b0 : cOut;

  assign c$app_arg_7 = c$case_scrut ? c$case_alt_5 : c$case_alt_6;

  assign c$case_alt_5 = xDone ? 3'b000 : c$case_alt_6;

  // rotateR begin
  wire [2*3-1:0] bv;
  assign bv = {c$ds_app_arg_1[3:1],c$ds_app_arg_1[3:1]} >> ((64'sd1) % 3);
  assign c$case_alt_6 = bv[3-1 : 0];
  // rotateR end

  assign c$app_arg_8 = c$case_scrut ? c$case_alt_7 : c$case_alt_8;

  assign c$case_alt_7 = xDone ? 6'b100000 : c$ds_app_arg_1[9:4];

  assign c$case_alt_8 = xDone ? c$app_arg_17 : c$ds_app_arg_1[9:4];

  assign c$app_arg_9 = xDone ? c$case_alt_9 : c$case_alt_10;

  assign c$case_alt_9 = c$case_scrut ? c$case_alt_11 : c$case_alt_12;

  // rotateLeftS begin
  localparam shift_amount_0 = 1 % 6;

  generate
  if (shift_amount_0 == 0) begin : no_shift_0
    assign c$case_alt_10 = c$app_arg_12;
  end else begin : do_shift_0
    assign c$case_alt_10 = {c$app_arg_12[((6-shift_amount_0)*1)-1 : 0]
                     ,c$app_arg_12[6-1 : (6-shift_amount_0)*1]
                     };
  end
  endgenerate
  // rotateLeftS end

  // rotateLeftS begin
  localparam shift_amount_1 = 1 % 6;

  generate
  if (shift_amount_1 == 0) begin : no_shift_1
    assign c$case_alt_11 = c$app_arg_10;
  end else begin : do_shift_1
    assign c$case_alt_11 = {c$app_arg_10[((6-shift_amount_1)*1)-1 : 0]
                     ,c$app_arg_10[6-1 : (6-shift_amount_1)*1]
                     };
  end
  endgenerate
  // rotateLeftS end

  // rotateRightS begin
  localparam shift_amount_2 = 2 % 6;

  generate
  if (shift_amount_2 == 0) begin : no_shift_2
    assign c$case_alt_12 = c$app_arg_10;
  end else begin : do_shift_2
    assign c$case_alt_12 = {c$app_arg_10[(shift_amount_2*1)-1 : 0]
                     ,c$app_arg_10[6-1 : shift_amount_2*1]
                     };
  end
  endgenerate
  // rotateRightS end

  // vector replace begin
  genvar i;
  generate
  for (i=0;i<6;i=i+1) begin : vector_replace
    assign c$app_arg_10[(5-i)*1+:1] = (64'sd0) == i ? cOut : c$app_arg_11[(5-i)*1+:1];
  end
  endgenerate
  // vector replace end

  assign cOut = (c$ds_app_arg_1[0:0] & sharedLogic) | (aIn & bIn);

  assign c$app_arg_11 = {c$ds_app_arg_1[14:14],
                         {{c$ds_app_arg_1[13:13],   c$ds_app_arg_1[12:12],   c$ds_app_arg_1[11:11],
                       c$ds_app_arg_1[10:10]},c$app_arg_13}};

  assign c$vec_0 = c$ds_app_arg_1[15:10];

  // vector replace begin
  genvar i_0;
  generate
  for (i_0=0;i_0<6;i_0=i_0+1) begin : vector_replace_0
    assign c$app_arg_12[(5-i_0)*1+:1] = (64'sd0) == i_0 ? c$app_arg_13 : c$vec_0[(5-i_0)*1+:1];
  end
  endgenerate
  // vector replace end

  assign c$app_arg_13 = sharedLogic ^ c$ds_app_arg_1[0:0];

  assign c$app_arg_14 = xDone ? (c$ds_app_arg_1[18:16] >> (64'sd1)) : c$ds_app_arg_1[18:16];

  // rotateR begin
  wire [2*3-1:0] bv_0;
  assign bv_0 = {c$ds_app_arg_1[21:19],c$ds_app_arg_1[21:19]} >> ((64'sd1) % 3);
  assign c$app_arg_15 = bv_0[3-1 : 0];
  // rotateR end

  assign c$app_arg_16 = c$case_scrut ? c$case_alt_13 : 2'd2;

  assign c$case_alt_13 = xDone ? 2'd3 : 2'd2;

  assign c$bv_3 = c$ds_app_arg_1[3:1];

  assign xDone = (c$bv_3[(64'sd0)]) == (1'b1);

  assign sharedLogic = aIn ^ bIn;

  assign c$bv_4 = (c$ds_app_arg_1[21:19]);

  assign c$bv_5 = (c$ds_app_arg_1[18:16]);

  assign aIn = ( c$bv_4[0] ) & ( c$bv_5[0] );

  assign c$vec_1 = c$ds_app_arg_1[15:10];

  // index lit begin
  assign bIn = c$vec_1[6-1-0*1 -: 1];
  // index lit end

  assign c$bv_6 = c$ds_app_arg_1[9:4];

  assign c$case_scrut = (c$bv_6[(64'sd0)]) == (1'b1);

  assign c$app_arg_17 = c$ds_app_arg_1[9:4] >> (64'sd1);

  assign c$case_alt_14 = start ? {{2'd1,
                                   result_5,   result_4,   c$ds_app_arg_1[15:10],
                                   6'b000010,   c$ds_app_arg_1[3:1],
                                   c$ds_app_arg_1[0:0]},   {1'b0,
                                                            1'b0}} : {c$ds_app_arg_1,   {1'b0,   1'b0}};

  assign start = result_0[1:1];

  assign c$din = result_1[0:0];

  // replaceBit start
  always @(*) begin
    result_4 = (c$ds_app_arg_1[18:16] >> (64'sd1));
    result_4[(64'sd2)] = c$din;
  end
  // replaceBit end

  assign c$din_0 = result_0[0:0];

  // replaceBit start
  always @(*) begin
    result_5 = (c$ds_app_arg_1[21:19] >> (64'sd1));
    result_5[(64'sd2)] = c$din_0;
  end
  // replaceBit end

  // register begin
  always @(posedge clk or  negedge  rst_n) begin : c$ds_app_arg_2_register
    if ( ! rst_n) begin
      c$ds_app_arg_2 <= {1'b0,   1'b0,   5'b00000,   6'b000000};
    end else if (ena) begin
      c$ds_app_arg_2 <= result_7[19:7];
    end
  end
  // register end

  assign result_6 = result_7[6:0];

  assign result_7 = c$ds_app_arg_2[12:12] ? result_8 : c$case_alt_15;

  assign result_8 = ((_counter[(64'sd0)]) == (1'b1)) ? {{1'b0,
                                                         1'b1,   5'b00000,   result_9},   {1'b1,
                                                                                           result_9}} : {{1'b1,   1'b0,
                                                                                                          _counter >> (64'sd1),
                                                                                                          result_9},
                                                                                                         {1'b0,
                                                                                                          6'b000000}};

  assign _counter = c$ds_app_arg_2[10:6];

  assign c$case_alt_15 = result_2[1:1] ? {{1'b1,
                                           1'b0,   5'b10000,   result_9},   {1'b0,
                                                                             6'b000000}} : {c$ds_app_arg_2,   {valid,
                                                                                                               currVal}};

  assign valid = c$ds_app_arg_2[11:11];

  assign c$din_1 = c$_tupIn[6:6];

  // replaceBit start
  always @(*) begin
    result_9 = (c$_tupIn[5:0] >> (64'sd1));
    result_9[(64'sd5)] = c$din_1;
  end
  // replaceBit end

  assign c$_tupIn = c$ds_app_arg_2[12:12] ? {_inputBit,
                                             currVal} : {_inputBit,   6'b000000};

  assign currVal = c$ds_app_arg_2[5:0];

  assign _inputBit = result_2[0:0];

  assign c$ds_app_arg_3 = a1_1 ? 1'b1 : 1'b0;

  assign result_10 = {a1_2 == 1'b1,   b1_0};

  assign ds_3 = (({(c$ds_app_arg_3),(b1)}));

  assign a1_1 = result_6[6:6];

  assign b1 = result_6[5:0];

  assign a1_2 = ds_3[6:6];

  assign b1_0 = ds_3[5:0];

  assign c$app_arg_18 = result_10[6:6] ? 1'b1 : 1'b0;

  assign a3 = (c$app_arg_18);

  assign a5 = result_10[5:0];

  assign result_11 = ({((a3)),(({(((1'b0))),((a5))}))});

  assign eta2 = {selMult == 3'b000,   xBit,
                 yBit};

  // register begin
  always @(posedge clk or  negedge  rst_n) begin : c$ds_app_arg_4_register
    if ( ! rst_n) begin
      c$ds_app_arg_4 <= {2'd0,   2'b00,   2'b00,   {1'b0,   1'b0,   1'b0,   1'b0},   4'b0000,   2'b00,
   1'b0};
    end else if (ena) begin
      c$ds_app_arg_4 <= result_13[18:2];
    end
  end
  // register end

  assign result_12 = result_13[1:0];

  assign result_selection_7 = c$ds_app_arg_4[16:15];

  always @(*) begin
    case(result_selection_7)
      2'b00 : result_13 = c$case_alt_27;
      2'b01 : result_13 = c$case_alt_17;
      2'b10 : result_13 = {{c$app_arg_30,
                            c$app_arg_29,   c$app_arg_28,   c$app_arg_23,
                            c$app_arg_22,   c$app_arg_21,   c$app_arg_20},
                           {1'b0,   1'b0}};
      default : result_13 = c$case_alt_16;
    endcase
  end

  assign c$case_alt_16 = c$case_scrut_0 ? {{2'd0,
                                            2'b00,   2'b00,   {4 {1'b0}},   4'b0000,
                                            2'b00,   1'b0},   {1'b1,   bIn_0}} : {{2'd3,
                                                                                   c$ds_app_arg_4[14:13],
                                                                                   c$ds_app_arg_4[12:11],
                                                                                   c$app_arg_19,   c$app_arg_31,
                                                                                   c$ds_app_arg_4[2:1],
                                                                                   c$ds_app_arg_4[0:0]},   {1'b1,
                                                                                                            bIn_0}};

  assign c$case_alt_17 = c$case_scrut_0 ? {{2'd2,
                                            result_15,   result_14,
                                            c$ds_app_arg_4[10:7],   4'b0010,   2'b10,
                                            c$ds_app_arg_4[0:0]},   {1'b0,
                                                                     1'b0}} : {{2'd1,   result_15,   result_14,
                                                                                c$ds_app_arg_4[10:7],   c$app_arg_31,
                                                                                c$ds_app_arg_4[2:1],
                                                                                c$ds_app_arg_4[0:0]},   {1'b0,   1'b0}};

  assign c$vec_2 = c$ds_app_arg_4[10:7];

  // rotateLeftS begin
  localparam shift_amount_3 = 1 % 4;

  generate
  if (shift_amount_3 == 0) begin : no_shift_3
    assign c$app_arg_19 = c$vec_2;
  end else begin : do_shift_3
    assign c$app_arg_19 = {c$vec_2[((4-shift_amount_3)*1)-1 : 0]
                     ,c$vec_2[4-1 : (4-shift_amount_3)*1]
                     };
  end
  endgenerate
  // rotateLeftS end

  assign c$app_arg_20 = xDone_0 ? 1'b0 : cOut_0;

  assign c$app_arg_21 = c$case_scrut_0 ? c$case_alt_18 : c$case_alt_19;

  assign c$case_alt_18 = xDone_0 ? 2'b00 : c$case_alt_19;

  // rotateR begin
  wire [2*2-1:0] bv_1;
  assign bv_1 = {c$ds_app_arg_4[2:1],c$ds_app_arg_4[2:1]} >> ((64'sd1) % 2);
  assign c$case_alt_19 = bv_1[2-1 : 0];
  // rotateR end

  assign c$app_arg_22 = c$case_scrut_0 ? c$case_alt_20 : c$case_alt_21;

  assign c$case_alt_20 = xDone_0 ? 4'b1000 : c$ds_app_arg_4[6:3];

  assign c$case_alt_21 = xDone_0 ? c$app_arg_31 : c$ds_app_arg_4[6:3];

  assign c$app_arg_23 = xDone_0 ? c$case_alt_22 : c$case_alt_23;

  assign c$case_alt_22 = c$case_scrut_0 ? c$case_alt_24 : c$case_alt_25;

  // rotateLeftS begin
  localparam shift_amount_4 = 1 % 4;

  generate
  if (shift_amount_4 == 0) begin : no_shift_4
    assign c$case_alt_23 = c$app_arg_26;
  end else begin : do_shift_4
    assign c$case_alt_23 = {c$app_arg_26[((4-shift_amount_4)*1)-1 : 0]
                     ,c$app_arg_26[4-1 : (4-shift_amount_4)*1]
                     };
  end
  endgenerate
  // rotateLeftS end

  // rotateLeftS begin
  localparam shift_amount_5 = 1 % 4;

  generate
  if (shift_amount_5 == 0) begin : no_shift_5
    assign c$case_alt_24 = c$app_arg_24;
  end else begin : do_shift_5
    assign c$case_alt_24 = {c$app_arg_24[((4-shift_amount_5)*1)-1 : 0]
                     ,c$app_arg_24[4-1 : (4-shift_amount_5)*1]
                     };
  end
  endgenerate
  // rotateLeftS end

  // rotateRightS begin
  localparam shift_amount_6 = 1 % 4;

  generate
  if (shift_amount_6 == 0) begin : no_shift_6
    assign c$case_alt_25 = c$app_arg_24;
  end else begin : do_shift_6
    assign c$case_alt_25 = {c$app_arg_24[(shift_amount_6*1)-1 : 0]
                     ,c$app_arg_24[4-1 : shift_amount_6*1]
                     };
  end
  endgenerate
  // rotateRightS end

  // vector replace begin
  genvar i_1;
  generate
  for (i_1=0;i_1<4;i_1=i_1+1) begin : vector_replace_1
    assign c$app_arg_24[(3-i_1)*1+:1] = (64'sd0) == i_1 ? cOut_0 : c$app_arg_25[(3-i_1)*1+:1];
  end
  endgenerate
  // vector replace end

  assign cOut_0 = (c$ds_app_arg_4[0:0] & sharedLogic_0) | (aIn_0 & bIn_0);

  assign c$app_arg_25 = {c$ds_app_arg_4[9:9],
                         {{c$ds_app_arg_4[8:8],   c$ds_app_arg_4[7:7]},c$app_arg_27}};

  assign c$vec_3 = c$ds_app_arg_4[10:7];

  // vector replace begin
  genvar i_2;
  generate
  for (i_2=0;i_2<4;i_2=i_2+1) begin : vector_replace_2
    assign c$app_arg_26[(3-i_2)*1+:1] = (64'sd0) == i_2 ? c$app_arg_27 : c$vec_3[(3-i_2)*1+:1];
  end
  endgenerate
  // vector replace end

  assign c$app_arg_27 = sharedLogic_0 ^ c$ds_app_arg_4[0:0];

  assign c$app_arg_28 = xDone_0 ? (c$ds_app_arg_4[12:11] >> (64'sd1)) : c$ds_app_arg_4[12:11];

  // rotateR begin
  wire [2*2-1:0] bv_2;
  assign bv_2 = {c$ds_app_arg_4[14:13],c$ds_app_arg_4[14:13]} >> ((64'sd1) % 2);
  assign c$app_arg_29 = bv_2[2-1 : 0];
  // rotateR end

  assign c$app_arg_30 = c$case_scrut_0 ? c$case_alt_26 : 2'd2;

  assign c$case_alt_26 = xDone_0 ? 2'd3 : 2'd2;

  assign c$bv_7 = c$ds_app_arg_4[2:1];

  assign xDone_0 = (c$bv_7[(64'sd0)]) == (1'b1);

  assign sharedLogic_0 = aIn_0 ^ bIn_0;

  assign c$bv_8 = (c$ds_app_arg_4[14:13]);

  assign c$bv_9 = (c$ds_app_arg_4[12:11]);

  assign aIn_0 = ( c$bv_8[0] ) & ( c$bv_9[0] );

  assign c$vec_4 = c$ds_app_arg_4[10:7];

  // index lit begin
  assign bIn_0 = c$vec_4[4-1-0*1 -: 1];
  // index lit end

  assign c$bv_10 = c$ds_app_arg_4[6:3];

  assign c$case_scrut_0 = (c$bv_10[(64'sd0)]) == (1'b1);

  assign c$app_arg_31 = c$ds_app_arg_4[6:3] >> (64'sd1);

  assign c$case_alt_27 = start_0 ? {{2'd1,
                                     result_15,   result_14,
                                     c$ds_app_arg_4[10:7],   4'b0001,
                                     c$ds_app_arg_4[2:1],   c$ds_app_arg_4[0:0]},
                                    {1'b0,   1'b0}} : {c$ds_app_arg_4,   {1'b0,
                                                                          1'b0}};

  assign start_0 = eta2[2:2];

  assign c$din_2 = eta2[0:0];

  // replaceBit start
  always @(*) begin
    result_14 = (c$ds_app_arg_4[12:11] >> (64'sd1));
    result_14[(64'sd1)] = c$din_2;
  end
  // replaceBit end

  assign c$din_3 = eta2[1:1];

  // replaceBit start
  always @(*) begin
    result_15 = (c$ds_app_arg_4[14:13] >> (64'sd1));
    result_15[(64'sd1)] = c$din_3;
  end
  // replaceBit end

  assign eta2_0 = {selMult == 3'b001,   xBit,
                   yBit};

  // register begin
  always @(posedge clk or  negedge  rst_n) begin : c$ds_app_arg_5_register
    if ( ! rst_n) begin
      c$ds_app_arg_5 <= {2'd0,   3'b000,   3'b000,   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0},
   6'b000000,   3'b000,   1'b0};
    end else if (ena) begin
      c$ds_app_arg_5 <= result_17[25:2];
    end
  end
  // register end

  assign result_16 = result_17[1:0];

  assign result_selection_10 = c$ds_app_arg_5[23:22];

  always @(*) begin
    case(result_selection_10)
      2'b00 : result_17 = c$case_alt_39;
      2'b01 : result_17 = c$case_alt_29;
      2'b10 : result_17 = {{c$app_arg_43,
                            c$app_arg_42,   c$app_arg_41,   c$app_arg_36,
                            c$app_arg_35,   c$app_arg_34,   c$app_arg_33},
                           {1'b0,   1'b0}};
      default : result_17 = c$case_alt_28;
    endcase
  end

  assign c$case_alt_28 = c$case_scrut_1 ? {{2'd0,
                                            3'b000,   3'b000,   {6 {1'b0}},   6'b000000,
                                            3'b000,   1'b0},   {1'b1,   bIn_1}} : {{2'd3,
                                                                                    c$ds_app_arg_5[21:19],
                                                                                    c$ds_app_arg_5[18:16],
                                                                                    c$app_arg_32,   c$app_arg_44,
                                                                                    c$ds_app_arg_5[3:1],
                                                                                    c$ds_app_arg_5[0:0]},   {1'b1,
                                                                                                             bIn_1}};

  assign c$case_alt_29 = c$case_scrut_1 ? {{2'd2,
                                            result_19,   result_18,
                                            c$ds_app_arg_5[15:10],   6'b000100,   3'b100,
                                            c$ds_app_arg_5[0:0]},   {1'b0,
                                                                     1'b0}} : {{2'd1,   result_19,   result_18,
                                                                                c$ds_app_arg_5[15:10],   c$app_arg_44,
                                                                                c$ds_app_arg_5[3:1],
                                                                                c$ds_app_arg_5[0:0]},   {1'b0,   1'b0}};

  assign c$vec_5 = c$ds_app_arg_5[15:10];

  // rotateLeftS begin
  localparam shift_amount_7 = 1 % 6;

  generate
  if (shift_amount_7 == 0) begin : no_shift_7
    assign c$app_arg_32 = c$vec_5;
  end else begin : do_shift_7
    assign c$app_arg_32 = {c$vec_5[((6-shift_amount_7)*1)-1 : 0]
                     ,c$vec_5[6-1 : (6-shift_amount_7)*1]
                     };
  end
  endgenerate
  // rotateLeftS end

  assign c$app_arg_33 = xDone_1 ? 1'b0 : cOut_1;

  assign c$app_arg_34 = c$case_scrut_1 ? c$case_alt_30 : c$case_alt_31;

  assign c$case_alt_30 = xDone_1 ? 3'b000 : c$case_alt_31;

  // rotateR begin
  wire [2*3-1:0] bv_3;
  assign bv_3 = {c$ds_app_arg_5[3:1],c$ds_app_arg_5[3:1]} >> ((64'sd1) % 3);
  assign c$case_alt_31 = bv_3[3-1 : 0];
  // rotateR end

  assign c$app_arg_35 = c$case_scrut_1 ? c$case_alt_32 : c$case_alt_33;

  assign c$case_alt_32 = xDone_1 ? 6'b100000 : c$ds_app_arg_5[9:4];

  assign c$case_alt_33 = xDone_1 ? c$app_arg_44 : c$ds_app_arg_5[9:4];

  assign c$app_arg_36 = xDone_1 ? c$case_alt_34 : c$case_alt_35;

  assign c$case_alt_34 = c$case_scrut_1 ? c$case_alt_36 : c$case_alt_37;

  // rotateLeftS begin
  localparam shift_amount_8 = 1 % 6;

  generate
  if (shift_amount_8 == 0) begin : no_shift_8
    assign c$case_alt_35 = c$app_arg_39;
  end else begin : do_shift_8
    assign c$case_alt_35 = {c$app_arg_39[((6-shift_amount_8)*1)-1 : 0]
                     ,c$app_arg_39[6-1 : (6-shift_amount_8)*1]
                     };
  end
  endgenerate
  // rotateLeftS end

  // rotateLeftS begin
  localparam shift_amount_9 = 1 % 6;

  generate
  if (shift_amount_9 == 0) begin : no_shift_9
    assign c$case_alt_36 = c$app_arg_37;
  end else begin : do_shift_9
    assign c$case_alt_36 = {c$app_arg_37[((6-shift_amount_9)*1)-1 : 0]
                     ,c$app_arg_37[6-1 : (6-shift_amount_9)*1]
                     };
  end
  endgenerate
  // rotateLeftS end

  // rotateRightS begin
  localparam shift_amount_10 = 2 % 6;

  generate
  if (shift_amount_10 == 0) begin : no_shift_10
    assign c$case_alt_37 = c$app_arg_37;
  end else begin : do_shift_10
    assign c$case_alt_37 = {c$app_arg_37[(shift_amount_10*1)-1 : 0]
                     ,c$app_arg_37[6-1 : shift_amount_10*1]
                     };
  end
  endgenerate
  // rotateRightS end

  // vector replace begin
  genvar i_3;
  generate
  for (i_3=0;i_3<6;i_3=i_3+1) begin : vector_replace_3
    assign c$app_arg_37[(5-i_3)*1+:1] = (64'sd0) == i_3 ? cOut_1 : c$app_arg_38[(5-i_3)*1+:1];
  end
  endgenerate
  // vector replace end

  assign cOut_1 = (c$ds_app_arg_5[0:0] & sharedLogic_1) | (aIn_1 & bIn_1);

  assign c$app_arg_38 = {c$ds_app_arg_5[14:14],
                         {{c$ds_app_arg_5[13:13],   c$ds_app_arg_5[12:12],   c$ds_app_arg_5[11:11],
                       c$ds_app_arg_5[10:10]},c$app_arg_40}};

  assign c$vec_6 = c$ds_app_arg_5[15:10];

  // vector replace begin
  genvar i_4;
  generate
  for (i_4=0;i_4<6;i_4=i_4+1) begin : vector_replace_4
    assign c$app_arg_39[(5-i_4)*1+:1] = (64'sd0) == i_4 ? c$app_arg_40 : c$vec_6[(5-i_4)*1+:1];
  end
  endgenerate
  // vector replace end

  assign c$app_arg_40 = sharedLogic_1 ^ c$ds_app_arg_5[0:0];

  assign c$app_arg_41 = xDone_1 ? (c$ds_app_arg_5[18:16] >> (64'sd1)) : c$ds_app_arg_5[18:16];

  // rotateR begin
  wire [2*3-1:0] bv_4;
  assign bv_4 = {c$ds_app_arg_5[21:19],c$ds_app_arg_5[21:19]} >> ((64'sd1) % 3);
  assign c$app_arg_42 = bv_4[3-1 : 0];
  // rotateR end

  assign c$app_arg_43 = c$case_scrut_1 ? c$case_alt_38 : 2'd2;

  assign c$case_alt_38 = xDone_1 ? 2'd3 : 2'd2;

  assign c$bv_11 = c$ds_app_arg_5[3:1];

  assign xDone_1 = (c$bv_11[(64'sd0)]) == (1'b1);

  assign sharedLogic_1 = aIn_1 ^ bIn_1;

  assign c$bv_12 = (c$ds_app_arg_5[21:19]);

  assign c$bv_13 = (c$ds_app_arg_5[18:16]);

  assign aIn_1 = ( c$bv_12[0] ) & ( c$bv_13[0] );

  assign c$vec_7 = c$ds_app_arg_5[15:10];

  // index lit begin
  assign bIn_1 = c$vec_7[6-1-0*1 -: 1];
  // index lit end

  assign c$bv_14 = c$ds_app_arg_5[9:4];

  assign c$case_scrut_1 = (c$bv_14[(64'sd0)]) == (1'b1);

  assign c$app_arg_44 = c$ds_app_arg_5[9:4] >> (64'sd1);

  assign c$case_alt_39 = start_1 ? {{2'd1,
                                     result_19,   result_18,
                                     c$ds_app_arg_5[15:10],   6'b000010,
                                     c$ds_app_arg_5[3:1],   c$ds_app_arg_5[0:0]},
                                    {1'b0,   1'b0}} : {c$ds_app_arg_5,   {1'b0,
                                                                          1'b0}};

  assign start_1 = eta2_0[2:2];

  assign c$din_4 = eta2_0[0:0];

  // replaceBit start
  always @(*) begin
    result_18 = (c$ds_app_arg_5[18:16] >> (64'sd1));
    result_18[(64'sd2)] = c$din_4;
  end
  // replaceBit end

  assign c$din_5 = eta2_0[1:1];

  // replaceBit start
  always @(*) begin
    result_19 = (c$ds_app_arg_5[21:19] >> (64'sd1));
    result_19[(64'sd2)] = c$din_5;
  end
  // replaceBit end

  assign eta2_1 = {selMult == 3'b010,   xBit,
                   yBit};

  // register begin
  always @(posedge clk or  negedge  rst_n) begin : c$ds_app_arg_6_register
    if ( ! rst_n) begin
      c$ds_app_arg_6 <= {2'd0,   4'b0000,   4'b0000,   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                  1'b0,   1'b0},   8'b00000000,   4'b0000,   1'b0};
    end else if (ena) begin
      c$ds_app_arg_6 <= result_21[32:2];
    end
  end
  // register end

  assign result_20 = result_21[1:0];

  assign result_selection_13 = c$ds_app_arg_6[30:29];

  always @(*) begin
    case(result_selection_13)
      2'b00 : result_21 = c$case_alt_51;
      2'b01 : result_21 = c$case_alt_41;
      2'b10 : result_21 = {{c$app_arg_56,
                            c$app_arg_55,   c$app_arg_54,   c$app_arg_49,
                            c$app_arg_48,   c$app_arg_47,   c$app_arg_46},
                           {1'b0,   1'b0}};
      default : result_21 = c$case_alt_40;
    endcase
  end

  assign c$case_alt_40 = c$case_scrut_2 ? {{2'd0,
                                            4'b0000,   4'b0000,   {8 {1'b0}},
                                            8'b00000000,   4'b0000,   1'b0},   {1'b1,
                                                                                bIn_2}} : {{2'd3,
                                                                                            c$ds_app_arg_6[28:25],
                                                                                            c$ds_app_arg_6[24:21],
                                                                                            c$app_arg_45,
                                                                                            c$app_arg_57,
                                                                                            c$ds_app_arg_6[4:1],
                                                                                            c$ds_app_arg_6[0:0]},
                                                                                           {1'b1,   bIn_2}};

  assign c$case_alt_41 = c$case_scrut_2 ? {{2'd2,
                                            result_23,   result_22,
                                            c$ds_app_arg_6[20:13],   8'b00001000,
                                            4'b1000,   c$ds_app_arg_6[0:0]},   {1'b0,
                                                                                1'b0}} : {{2'd1,   result_23,
                                                                                           result_22,
                                                                                           c$ds_app_arg_6[20:13],
                                                                                           c$app_arg_57,
                                                                                           c$ds_app_arg_6[4:1],
                                                                                           c$ds_app_arg_6[0:0]},
                                                                                          {1'b0,   1'b0}};

  assign c$vec_8 = c$ds_app_arg_6[20:13];

  // rotateLeftS begin
  localparam shift_amount_11 = 1 % 8;

  generate
  if (shift_amount_11 == 0) begin : no_shift_11
    assign c$app_arg_45 = c$vec_8;
  end else begin : do_shift_11
    assign c$app_arg_45 = {c$vec_8[((8-shift_amount_11)*1)-1 : 0]
                     ,c$vec_8[8-1 : (8-shift_amount_11)*1]
                     };
  end
  endgenerate
  // rotateLeftS end

  assign c$app_arg_46 = xDone_2 ? 1'b0 : cOut_2;

  assign c$app_arg_47 = c$case_scrut_2 ? c$case_alt_42 : c$case_alt_43;

  assign c$case_alt_42 = xDone_2 ? 4'b0000 : c$case_alt_43;

  // rotateR begin
  wire [2*4-1:0] bv_5;
  assign bv_5 = {c$ds_app_arg_6[4:1],c$ds_app_arg_6[4:1]} >> ((64'sd1) % 4);
  assign c$case_alt_43 = bv_5[4-1 : 0];
  // rotateR end

  assign c$app_arg_48 = c$case_scrut_2 ? c$case_alt_44 : c$case_alt_45;

  assign c$case_alt_44 = xDone_2 ? 8'b10000000 : c$ds_app_arg_6[12:5];

  assign c$case_alt_45 = xDone_2 ? c$app_arg_57 : c$ds_app_arg_6[12:5];

  assign c$app_arg_49 = xDone_2 ? c$case_alt_46 : c$case_alt_47;

  assign c$case_alt_46 = c$case_scrut_2 ? c$case_alt_48 : c$case_alt_49;

  // rotateLeftS begin
  localparam shift_amount_12 = 1 % 8;

  generate
  if (shift_amount_12 == 0) begin : no_shift_12
    assign c$case_alt_47 = c$app_arg_52;
  end else begin : do_shift_12
    assign c$case_alt_47 = {c$app_arg_52[((8-shift_amount_12)*1)-1 : 0]
                     ,c$app_arg_52[8-1 : (8-shift_amount_12)*1]
                     };
  end
  endgenerate
  // rotateLeftS end

  // rotateLeftS begin
  localparam shift_amount_13 = 1 % 8;

  generate
  if (shift_amount_13 == 0) begin : no_shift_13
    assign c$case_alt_48 = c$app_arg_50;
  end else begin : do_shift_13
    assign c$case_alt_48 = {c$app_arg_50[((8-shift_amount_13)*1)-1 : 0]
                     ,c$app_arg_50[8-1 : (8-shift_amount_13)*1]
                     };
  end
  endgenerate
  // rotateLeftS end

  // rotateRightS begin
  localparam shift_amount_14 = 3 % 8;

  generate
  if (shift_amount_14 == 0) begin : no_shift_14
    assign c$case_alt_49 = c$app_arg_50;
  end else begin : do_shift_14
    assign c$case_alt_49 = {c$app_arg_50[(shift_amount_14*1)-1 : 0]
                     ,c$app_arg_50[8-1 : shift_amount_14*1]
                     };
  end
  endgenerate
  // rotateRightS end

  // vector replace begin
  genvar i_5;
  generate
  for (i_5=0;i_5<8;i_5=i_5+1) begin : vector_replace_5
    assign c$app_arg_50[(7-i_5)*1+:1] = (64'sd0) == i_5 ? cOut_2 : c$app_arg_51[(7-i_5)*1+:1];
  end
  endgenerate
  // vector replace end

  assign cOut_2 = (c$ds_app_arg_6[0:0] & sharedLogic_2) | (aIn_2 & bIn_2);

  assign c$app_arg_51 = {c$ds_app_arg_6[19:19],
                         {{c$ds_app_arg_6[18:18],   c$ds_app_arg_6[17:17],   c$ds_app_arg_6[16:16],
                       c$ds_app_arg_6[15:15],   c$ds_app_arg_6[14:14],   c$ds_app_arg_6[13:13]},c$app_arg_53}};

  assign c$vec_9 = c$ds_app_arg_6[20:13];

  // vector replace begin
  genvar i_6;
  generate
  for (i_6=0;i_6<8;i_6=i_6+1) begin : vector_replace_6
    assign c$app_arg_52[(7-i_6)*1+:1] = (64'sd0) == i_6 ? c$app_arg_53 : c$vec_9[(7-i_6)*1+:1];
  end
  endgenerate
  // vector replace end

  assign c$app_arg_53 = sharedLogic_2 ^ c$ds_app_arg_6[0:0];

  assign c$app_arg_54 = xDone_2 ? (c$ds_app_arg_6[24:21] >> (64'sd1)) : c$ds_app_arg_6[24:21];

  // rotateR begin
  wire [2*4-1:0] bv_6;
  assign bv_6 = {c$ds_app_arg_6[28:25],c$ds_app_arg_6[28:25]} >> ((64'sd1) % 4);
  assign c$app_arg_55 = bv_6[4-1 : 0];
  // rotateR end

  assign c$app_arg_56 = c$case_scrut_2 ? c$case_alt_50 : 2'd2;

  assign c$case_alt_50 = xDone_2 ? 2'd3 : 2'd2;

  assign c$bv_15 = c$ds_app_arg_6[4:1];

  assign xDone_2 = (c$bv_15[(64'sd0)]) == (1'b1);

  assign sharedLogic_2 = aIn_2 ^ bIn_2;

  assign c$bv_16 = (c$ds_app_arg_6[28:25]);

  assign c$bv_17 = (c$ds_app_arg_6[24:21]);

  assign aIn_2 = ( c$bv_16[0] ) & ( c$bv_17[0] );

  assign c$vec_10 = c$ds_app_arg_6[20:13];

  // index lit begin
  assign bIn_2 = c$vec_10[8-1-0*1 -: 1];
  // index lit end

  assign c$bv_18 = c$ds_app_arg_6[12:5];

  assign c$case_scrut_2 = (c$bv_18[(64'sd0)]) == (1'b1);

  assign c$app_arg_57 = c$ds_app_arg_6[12:5] >> (64'sd1);

  assign c$case_alt_51 = start_2 ? {{2'd1,
                                     result_23,   result_22,
                                     c$ds_app_arg_6[20:13],   8'b00000100,
                                     c$ds_app_arg_6[4:1],   c$ds_app_arg_6[0:0]},
                                    {1'b0,   1'b0}} : {c$ds_app_arg_6,   {1'b0,
                                                                          1'b0}};

  assign start_2 = eta2_1[2:2];

  assign c$din_6 = eta2_1[0:0];

  // replaceBit start
  always @(*) begin
    result_22 = (c$ds_app_arg_6[24:21] >> (64'sd1));
    result_22[(64'sd3)] = c$din_6;
  end
  // replaceBit end

  assign c$din_7 = eta2_1[1:1];

  // replaceBit start
  always @(*) begin
    result_23 = (c$ds_app_arg_6[28:25] >> (64'sd1));
    result_23[(64'sd3)] = c$din_7;
  end
  // replaceBit end

  assign eta2_2 = {selMult == 3'b011,   xBit,
                   yBit};

  // register begin
  always @(posedge clk or  negedge  rst_n) begin : c$ds_app_arg_7_register
    if ( ! rst_n) begin
      c$ds_app_arg_7 <= {2'd0,   5'b00000,   5'b00000,   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                    1'b0,   1'b0,   1'b0,   1'b0},
   10'b0000000000,   5'b00000,   1'b0};
    end else if (ena) begin
      c$ds_app_arg_7 <= result_25[39:2];
    end
  end
  // register end

  assign result_24 = result_25[1:0];

  assign result_selection_16 = c$ds_app_arg_7[37:36];

  always @(*) begin
    case(result_selection_16)
      2'b00 : result_25 = c$case_alt_63;
      2'b01 : result_25 = c$case_alt_53;
      2'b10 : result_25 = {{c$app_arg_69,
                            c$app_arg_68,   c$app_arg_67,   c$app_arg_62,
                            c$app_arg_61,   c$app_arg_60,   c$app_arg_59},
                           {1'b0,   1'b0}};
      default : result_25 = c$case_alt_52;
    endcase
  end

  assign c$case_alt_52 = c$case_scrut_3 ? {{2'd0,
                                            5'b00000,   5'b00000,   {10 {1'b0}},
                                            10'b0000000000,   5'b00000,   1'b0},   {1'b1,
                                                                                    bIn_3}} : {{2'd3,
                                                                                                c$ds_app_arg_7[35:31],
                                                                                                c$ds_app_arg_7[30:26],
                                                                                                c$app_arg_58,
                                                                                                c$app_arg_70,
                                                                                                c$ds_app_arg_7[5:1],
                                                                                                c$ds_app_arg_7[0:0]},
                                                                                               {1'b1,   bIn_3}};

  assign c$case_alt_53 = c$case_scrut_3 ? {{2'd2,
                                            result_27,   result_26,
                                            c$ds_app_arg_7[25:16],   10'b0000010000,
                                            5'b10000,   c$ds_app_arg_7[0:0]},   {1'b0,
                                                                                 1'b0}} : {{2'd1,   result_27,
                                                                                            result_26,
                                                                                            c$ds_app_arg_7[25:16],
                                                                                            c$app_arg_70,
                                                                                            c$ds_app_arg_7[5:1],
                                                                                            c$ds_app_arg_7[0:0]},
                                                                                           {1'b0,   1'b0}};

  assign c$vec_11 = c$ds_app_arg_7[25:16];

  // rotateLeftS begin
  localparam shift_amount_15 = 1 % 10;

  generate
  if (shift_amount_15 == 0) begin : no_shift_15
    assign c$app_arg_58 = c$vec_11;
  end else begin : do_shift_15
    assign c$app_arg_58 = {c$vec_11[((10-shift_amount_15)*1)-1 : 0]
                     ,c$vec_11[10-1 : (10-shift_amount_15)*1]
                     };
  end
  endgenerate
  // rotateLeftS end

  assign c$app_arg_59 = xDone_3 ? 1'b0 : cOut_3;

  assign c$app_arg_60 = c$case_scrut_3 ? c$case_alt_54 : c$case_alt_55;

  assign c$case_alt_54 = xDone_3 ? 5'b00000 : c$case_alt_55;

  // rotateR begin
  wire [2*5-1:0] bv_7;
  assign bv_7 = {c$ds_app_arg_7[5:1],c$ds_app_arg_7[5:1]} >> ((64'sd1) % 5);
  assign c$case_alt_55 = bv_7[5-1 : 0];
  // rotateR end

  assign c$app_arg_61 = c$case_scrut_3 ? c$case_alt_56 : c$case_alt_57;

  assign c$case_alt_56 = xDone_3 ? 10'b1000000000 : c$ds_app_arg_7[15:6];

  assign c$case_alt_57 = xDone_3 ? c$app_arg_70 : c$ds_app_arg_7[15:6];

  assign c$app_arg_62 = xDone_3 ? c$case_alt_58 : c$case_alt_59;

  assign c$case_alt_58 = c$case_scrut_3 ? c$case_alt_60 : c$case_alt_61;

  // rotateLeftS begin
  localparam shift_amount_16 = 1 % 10;

  generate
  if (shift_amount_16 == 0) begin : no_shift_16
    assign c$case_alt_59 = c$app_arg_65;
  end else begin : do_shift_16
    assign c$case_alt_59 = {c$app_arg_65[((10-shift_amount_16)*1)-1 : 0]
                     ,c$app_arg_65[10-1 : (10-shift_amount_16)*1]
                     };
  end
  endgenerate
  // rotateLeftS end

  // rotateLeftS begin
  localparam shift_amount_17 = 1 % 10;

  generate
  if (shift_amount_17 == 0) begin : no_shift_17
    assign c$case_alt_60 = c$app_arg_63;
  end else begin : do_shift_17
    assign c$case_alt_60 = {c$app_arg_63[((10-shift_amount_17)*1)-1 : 0]
                     ,c$app_arg_63[10-1 : (10-shift_amount_17)*1]
                     };
  end
  endgenerate
  // rotateLeftS end

  // rotateRightS begin
  localparam shift_amount_18 = 4 % 10;

  generate
  if (shift_amount_18 == 0) begin : no_shift_18
    assign c$case_alt_61 = c$app_arg_63;
  end else begin : do_shift_18
    assign c$case_alt_61 = {c$app_arg_63[(shift_amount_18*1)-1 : 0]
                     ,c$app_arg_63[10-1 : shift_amount_18*1]
                     };
  end
  endgenerate
  // rotateRightS end

  // vector replace begin
  genvar i_7;
  generate
  for (i_7=0;i_7<10;i_7=i_7+1) begin : vector_replace_7
    assign c$app_arg_63[(9-i_7)*1+:1] = (64'sd0) == i_7 ? cOut_3 : c$app_arg_64[(9-i_7)*1+:1];
  end
  endgenerate
  // vector replace end

  assign cOut_3 = (c$ds_app_arg_7[0:0] & sharedLogic_3) | (aIn_3 & bIn_3);

  assign c$app_arg_64 = {c$ds_app_arg_7[24:24],
                         {{c$ds_app_arg_7[23:23],   c$ds_app_arg_7[22:22],   c$ds_app_arg_7[21:21],
                       c$ds_app_arg_7[20:20],   c$ds_app_arg_7[19:19],   c$ds_app_arg_7[18:18],
                       c$ds_app_arg_7[17:17],   c$ds_app_arg_7[16:16]},c$app_arg_66}};

  assign c$vec_12 = c$ds_app_arg_7[25:16];

  // vector replace begin
  genvar i_8;
  generate
  for (i_8=0;i_8<10;i_8=i_8+1) begin : vector_replace_8
    assign c$app_arg_65[(9-i_8)*1+:1] = (64'sd0) == i_8 ? c$app_arg_66 : c$vec_12[(9-i_8)*1+:1];
  end
  endgenerate
  // vector replace end

  assign c$app_arg_66 = sharedLogic_3 ^ c$ds_app_arg_7[0:0];

  assign c$app_arg_67 = xDone_3 ? (c$ds_app_arg_7[30:26] >> (64'sd1)) : c$ds_app_arg_7[30:26];

  // rotateR begin
  wire [2*5-1:0] bv_8;
  assign bv_8 = {c$ds_app_arg_7[35:31],c$ds_app_arg_7[35:31]} >> ((64'sd1) % 5);
  assign c$app_arg_68 = bv_8[5-1 : 0];
  // rotateR end

  assign c$app_arg_69 = c$case_scrut_3 ? c$case_alt_62 : 2'd2;

  assign c$case_alt_62 = xDone_3 ? 2'd3 : 2'd2;

  assign c$bv_19 = c$ds_app_arg_7[5:1];

  assign xDone_3 = (c$bv_19[(64'sd0)]) == (1'b1);

  assign sharedLogic_3 = aIn_3 ^ bIn_3;

  assign c$bv_20 = (c$ds_app_arg_7[35:31]);

  assign c$bv_21 = (c$ds_app_arg_7[30:26]);

  assign aIn_3 = ( c$bv_20[0] ) & ( c$bv_21[0] );

  assign c$vec_13 = c$ds_app_arg_7[25:16];

  // index lit begin
  assign bIn_3 = c$vec_13[10-1-0*1 -: 1];
  // index lit end

  assign c$bv_22 = c$ds_app_arg_7[15:6];

  assign c$case_scrut_3 = (c$bv_22[(64'sd0)]) == (1'b1);

  assign c$app_arg_70 = c$ds_app_arg_7[15:6] >> (64'sd1);

  assign c$case_alt_63 = start_3 ? {{2'd1,
                                     result_27,   result_26,
                                     c$ds_app_arg_7[25:16],   10'b0000001000,
                                     c$ds_app_arg_7[5:1],   c$ds_app_arg_7[0:0]},
                                    {1'b0,   1'b0}} : {c$ds_app_arg_7,   {1'b0,
                                                                          1'b0}};

  assign start_3 = eta2_2[2:2];

  assign c$din_8 = eta2_2[0:0];

  // replaceBit start
  always @(*) begin
    result_26 = (c$ds_app_arg_7[30:26] >> (64'sd1));
    result_26[(64'sd4)] = c$din_8;
  end
  // replaceBit end

  assign c$din_9 = eta2_2[1:1];

  // replaceBit start
  always @(*) begin
    result_27 = (c$ds_app_arg_7[35:31] >> (64'sd1));
    result_27[(64'sd4)] = c$din_9;
  end
  // replaceBit end

  assign eta2_3 = {selMult == 3'b100,   xBit,
                   yBit};

  // register begin
  always @(posedge clk or  negedge  rst_n) begin : c$ds_app_arg_8_register
    if ( ! rst_n) begin
      c$ds_app_arg_8 <= {2'd0,   8'b00000000,   8'b00000000,   {1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                          1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                          1'b0,   1'b0,   1'b0,   1'b0,   1'b0,
                                          1'b0},   16'b0000000000000000,
   8'b00000000,   1'b0};
    end else if (ena) begin
      c$ds_app_arg_8 <= result_29[60:2];
    end
  end
  // register end

  assign result_28 = result_29[1:0];

  assign result_selection_19 = c$ds_app_arg_8[58:57];

  always @(*) begin
    case(result_selection_19)
      2'b00 : result_29 = c$case_alt_75;
      2'b01 : result_29 = c$case_alt_65;
      2'b10 : result_29 = {{c$app_arg_82,
                            c$app_arg_81,   c$app_arg_80,   c$app_arg_75,
                            c$app_arg_74,   c$app_arg_73,   c$app_arg_72},
                           {1'b0,   1'b0}};
      default : result_29 = c$case_alt_64;
    endcase
  end

  assign c$case_alt_64 = c$case_scrut_4 ? {{2'd0,
                                            8'b00000000,   8'b00000000,   {16 {1'b0}},
                                            16'b0000000000000000,   8'b00000000,   1'b0},
                                           {1'b1,   bIn_4}} : {{2'd3,
                                                                c$ds_app_arg_8[56:49],
                                                                c$ds_app_arg_8[48:41],   c$app_arg_71,
                                                                c$app_arg_83,   c$ds_app_arg_8[8:1],
                                                                c$ds_app_arg_8[0:0]},   {1'b1,   bIn_4}};

  assign c$case_alt_65 = c$case_scrut_4 ? {{2'd2,
                                            result_31,   result_30,
                                            c$ds_app_arg_8[40:25],   16'b0000000010000000,
                                            8'b10000000,   c$ds_app_arg_8[0:0]},   {1'b0,
                                                                                    1'b0}} : {{2'd1,   result_31,
                                                                                               result_30,
                                                                                               c$ds_app_arg_8[40:25],
                                                                                               c$app_arg_83,
                                                                                               c$ds_app_arg_8[8:1],
                                                                                               c$ds_app_arg_8[0:0]},
                                                                                              {1'b0,   1'b0}};

  assign c$vec_14 = c$ds_app_arg_8[40:25];

  // rotateLeftS begin
  localparam shift_amount_19 = 1 % 16;

  generate
  if (shift_amount_19 == 0) begin : no_shift_19
    assign c$app_arg_71 = c$vec_14;
  end else begin : do_shift_19
    assign c$app_arg_71 = {c$vec_14[((16-shift_amount_19)*1)-1 : 0]
                     ,c$vec_14[16-1 : (16-shift_amount_19)*1]
                     };
  end
  endgenerate
  // rotateLeftS end

  assign c$app_arg_72 = xDone_4 ? 1'b0 : cOut_4;

  assign c$app_arg_73 = c$case_scrut_4 ? c$case_alt_66 : c$case_alt_67;

  assign c$case_alt_66 = xDone_4 ? 8'b00000000 : c$case_alt_67;

  // rotateR begin
  wire [2*8-1:0] bv_9;
  assign bv_9 = {c$ds_app_arg_8[8:1],c$ds_app_arg_8[8:1]} >> ((64'sd1) % 8);
  assign c$case_alt_67 = bv_9[8-1 : 0];
  // rotateR end

  assign c$app_arg_74 = c$case_scrut_4 ? c$case_alt_68 : c$case_alt_69;

  assign c$case_alt_68 = xDone_4 ? 16'b1000000000000000 : c$ds_app_arg_8[24:9];

  assign c$case_alt_69 = xDone_4 ? c$app_arg_83 : c$ds_app_arg_8[24:9];

  assign c$app_arg_75 = xDone_4 ? c$case_alt_70 : c$case_alt_71;

  assign c$case_alt_70 = c$case_scrut_4 ? c$case_alt_72 : c$case_alt_73;

  // rotateLeftS begin
  localparam shift_amount_20 = 1 % 16;

  generate
  if (shift_amount_20 == 0) begin : no_shift_20
    assign c$case_alt_71 = c$app_arg_78;
  end else begin : do_shift_20
    assign c$case_alt_71 = {c$app_arg_78[((16-shift_amount_20)*1)-1 : 0]
                     ,c$app_arg_78[16-1 : (16-shift_amount_20)*1]
                     };
  end
  endgenerate
  // rotateLeftS end

  // rotateLeftS begin
  localparam shift_amount_21 = 1 % 16;

  generate
  if (shift_amount_21 == 0) begin : no_shift_21
    assign c$case_alt_72 = c$app_arg_76;
  end else begin : do_shift_21
    assign c$case_alt_72 = {c$app_arg_76[((16-shift_amount_21)*1)-1 : 0]
                     ,c$app_arg_76[16-1 : (16-shift_amount_21)*1]
                     };
  end
  endgenerate
  // rotateLeftS end

  // rotateRightS begin
  localparam shift_amount_22 = 7 % 16;

  generate
  if (shift_amount_22 == 0) begin : no_shift_22
    assign c$case_alt_73 = c$app_arg_76;
  end else begin : do_shift_22
    assign c$case_alt_73 = {c$app_arg_76[(shift_amount_22*1)-1 : 0]
                     ,c$app_arg_76[16-1 : shift_amount_22*1]
                     };
  end
  endgenerate
  // rotateRightS end

  // vector replace begin
  genvar i_9;
  generate
  for (i_9=0;i_9<16;i_9=i_9+1) begin : vector_replace_9
    assign c$app_arg_76[(15-i_9)*1+:1] = (64'sd0) == i_9 ? cOut_4 : c$app_arg_77[(15-i_9)*1+:1];
  end
  endgenerate
  // vector replace end

  assign cOut_4 = (c$ds_app_arg_8[0:0] & sharedLogic_4) | (aIn_4 & bIn_4);

  assign c$app_arg_77 = {c$ds_app_arg_8[39:39],
                         {{c$ds_app_arg_8[38:38],   c$ds_app_arg_8[37:37],   c$ds_app_arg_8[36:36],
                       c$ds_app_arg_8[35:35],   c$ds_app_arg_8[34:34],   c$ds_app_arg_8[33:33],
                       c$ds_app_arg_8[32:32],   c$ds_app_arg_8[31:31],   c$ds_app_arg_8[30:30],
                       c$ds_app_arg_8[29:29],   c$ds_app_arg_8[28:28],   c$ds_app_arg_8[27:27],
                       c$ds_app_arg_8[26:26],   c$ds_app_arg_8[25:25]},c$app_arg_79}};

  assign c$vec_15 = c$ds_app_arg_8[40:25];

  // vector replace begin
  genvar i_10;
  generate
  for (i_10=0;i_10<16;i_10=i_10+1) begin : vector_replace_10
    assign c$app_arg_78[(15-i_10)*1+:1] = (64'sd0) == i_10 ? c$app_arg_79 : c$vec_15[(15-i_10)*1+:1];
  end
  endgenerate
  // vector replace end

  assign c$app_arg_79 = sharedLogic_4 ^ c$ds_app_arg_8[0:0];

  assign c$app_arg_80 = xDone_4 ? (c$ds_app_arg_8[48:41] >> (64'sd1)) : c$ds_app_arg_8[48:41];

  // rotateR begin
  wire [2*8-1:0] bv_10;
  assign bv_10 = {c$ds_app_arg_8[56:49],c$ds_app_arg_8[56:49]} >> ((64'sd1) % 8);
  assign c$app_arg_81 = bv_10[8-1 : 0];
  // rotateR end

  assign c$app_arg_82 = c$case_scrut_4 ? c$case_alt_74 : 2'd2;

  assign c$case_alt_74 = xDone_4 ? 2'd3 : 2'd2;

  assign c$bv_23 = c$ds_app_arg_8[8:1];

  assign xDone_4 = (c$bv_23[(64'sd0)]) == (1'b1);

  assign sharedLogic_4 = aIn_4 ^ bIn_4;

  assign c$bv_24 = (c$ds_app_arg_8[56:49]);

  assign c$bv_25 = (c$ds_app_arg_8[48:41]);

  assign aIn_4 = ( c$bv_24[0] ) & ( c$bv_25[0] );

  assign c$vec_16 = c$ds_app_arg_8[40:25];

  // index lit begin
  assign bIn_4 = c$vec_16[16-1-0*1 -: 1];
  // index lit end

  assign c$bv_26 = c$ds_app_arg_8[24:9];

  assign c$case_scrut_4 = (c$bv_26[(64'sd0)]) == (1'b1);

  assign c$app_arg_83 = c$ds_app_arg_8[24:9] >> (64'sd1);

  assign c$case_alt_75 = start_4 ? {{2'd1,
                                     result_31,   result_30,
                                     c$ds_app_arg_8[40:25],   16'b0000000001000000,
                                     c$ds_app_arg_8[8:1],   c$ds_app_arg_8[0:0]},
                                    {1'b0,   1'b0}} : {c$ds_app_arg_8,   {1'b0,
                                                                          1'b0}};

  assign start_4 = eta2_3[2:2];

  assign c$din_10 = eta2_3[0:0];

  // replaceBit start
  always @(*) begin
    result_30 = (c$ds_app_arg_8[48:41] >> (64'sd1));
    result_30[(64'sd7)] = c$din_10;
  end
  // replaceBit end

  assign c$din_11 = eta2_3[1:1];

  // replaceBit start
  always @(*) begin
    result_31 = (c$ds_app_arg_8[56:49] >> (64'sd1));
    result_31[(64'sd7)] = c$din_11;
  end
  // replaceBit end

  assign eta2_4 = {selMult == 3'b101,   xBit,
                   yBit};

  // register begin
  always @(posedge clk or  negedge  rst_n) begin : c$ds_app_arg_9_register
    if ( ! rst_n) begin
      c$ds_app_arg_9 <= {2'd0,   10'b0000000000,   10'b0000000000,   {1'b0,   1'b0,   1'b0,   1'b0,
                                                1'b0,   1'b0,   1'b0,   1'b0,
                                                1'b0,   1'b0,   1'b0,   1'b0,
                                                1'b0,   1'b0,   1'b0,   1'b0,
                                                1'b0,   1'b0,   1'b0,   1'b0},
   20'b00000000000000000000,   10'b0000000000,   1'b0};
    end else if (ena) begin
      c$ds_app_arg_9 <= result_33[74:2];
    end
  end
  // register end

  assign result_32 = result_33[1:0];

  assign result_selection_22 = c$ds_app_arg_9[72:71];

  always @(*) begin
    case(result_selection_22)
      2'b00 : result_33 = c$case_alt_87;
      2'b01 : result_33 = c$case_alt_77;
      2'b10 : result_33 = {{c$app_arg_95,
                            c$app_arg_94,   c$app_arg_93,   c$app_arg_88,
                            c$app_arg_87,   c$app_arg_86,   c$app_arg_85},
                           {1'b0,   1'b0}};
      default : result_33 = c$case_alt_76;
    endcase
  end

  assign c$case_alt_76 = c$case_scrut_5 ? {{2'd0,
                                            10'b0000000000,   10'b0000000000,
                                            {20 {1'b0}},   20'b00000000000000000000,
                                            10'b0000000000,   1'b0},   {1'b1,
                                                                        bIn_5}} : {{2'd3,   c$ds_app_arg_9[70:61],
                                                                                    c$ds_app_arg_9[60:51],
                                                                                    c$app_arg_84,   c$app_arg_96,
                                                                                    c$ds_app_arg_9[10:1],
                                                                                    c$ds_app_arg_9[0:0]},   {1'b1,
                                                                                                             bIn_5}};

  assign c$case_alt_77 = c$case_scrut_5 ? {{2'd2,
                                            result_35,   result_34,
                                            c$ds_app_arg_9[50:31],
                                            20'b00000000001000000000,   10'b1000000000,
                                            c$ds_app_arg_9[0:0]},   {1'b0,
                                                                     1'b0}} : {{2'd1,   result_35,   result_34,
                                                                                c$ds_app_arg_9[50:31],   c$app_arg_96,
                                                                                c$ds_app_arg_9[10:1],
                                                                                c$ds_app_arg_9[0:0]},   {1'b0,   1'b0}};

  assign c$vec_17 = c$ds_app_arg_9[50:31];

  // rotateLeftS begin
  localparam shift_amount_23 = 1 % 20;

  generate
  if (shift_amount_23 == 0) begin : no_shift_23
    assign c$app_arg_84 = c$vec_17;
  end else begin : do_shift_23
    assign c$app_arg_84 = {c$vec_17[((20-shift_amount_23)*1)-1 : 0]
                     ,c$vec_17[20-1 : (20-shift_amount_23)*1]
                     };
  end
  endgenerate
  // rotateLeftS end

  assign c$app_arg_85 = xDone_5 ? 1'b0 : cOut_5;

  assign c$app_arg_86 = c$case_scrut_5 ? c$case_alt_78 : c$case_alt_79;

  assign c$case_alt_78 = xDone_5 ? 10'b0000000000 : c$case_alt_79;

  // rotateR begin
  wire [2*10-1:0] bv_11;
  assign bv_11 = {c$ds_app_arg_9[10:1],c$ds_app_arg_9[10:1]} >> ((64'sd1) % 10);
  assign c$case_alt_79 = bv_11[10-1 : 0];
  // rotateR end

  assign c$app_arg_87 = c$case_scrut_5 ? c$case_alt_80 : c$case_alt_81;

  assign c$case_alt_80 = xDone_5 ? 20'b10000000000000000000 : c$ds_app_arg_9[30:11];

  assign c$case_alt_81 = xDone_5 ? c$app_arg_96 : c$ds_app_arg_9[30:11];

  assign c$app_arg_88 = xDone_5 ? c$case_alt_82 : c$case_alt_83;

  assign c$case_alt_82 = c$case_scrut_5 ? c$case_alt_84 : c$case_alt_85;

  // rotateLeftS begin
  localparam shift_amount_24 = 1 % 20;

  generate
  if (shift_amount_24 == 0) begin : no_shift_24
    assign c$case_alt_83 = c$app_arg_91;
  end else begin : do_shift_24
    assign c$case_alt_83 = {c$app_arg_91[((20-shift_amount_24)*1)-1 : 0]
                     ,c$app_arg_91[20-1 : (20-shift_amount_24)*1]
                     };
  end
  endgenerate
  // rotateLeftS end

  // rotateLeftS begin
  localparam shift_amount_25 = 1 % 20;

  generate
  if (shift_amount_25 == 0) begin : no_shift_25
    assign c$case_alt_84 = c$app_arg_89;
  end else begin : do_shift_25
    assign c$case_alt_84 = {c$app_arg_89[((20-shift_amount_25)*1)-1 : 0]
                     ,c$app_arg_89[20-1 : (20-shift_amount_25)*1]
                     };
  end
  endgenerate
  // rotateLeftS end

  // rotateRightS begin
  localparam shift_amount_26 = 9 % 20;

  generate
  if (shift_amount_26 == 0) begin : no_shift_26
    assign c$case_alt_85 = c$app_arg_89;
  end else begin : do_shift_26
    assign c$case_alt_85 = {c$app_arg_89[(shift_amount_26*1)-1 : 0]
                     ,c$app_arg_89[20-1 : shift_amount_26*1]
                     };
  end
  endgenerate
  // rotateRightS end

  // vector replace begin
  genvar i_11;
  generate
  for (i_11=0;i_11<20;i_11=i_11+1) begin : vector_replace_11
    assign c$app_arg_89[(19-i_11)*1+:1] = (64'sd0) == i_11 ? cOut_5 : c$app_arg_90[(19-i_11)*1+:1];
  end
  endgenerate
  // vector replace end

  assign cOut_5 = (c$ds_app_arg_9[0:0] & sharedLogic_5) | (aIn_5 & bIn_5);

  assign c$app_arg_90 = {c$ds_app_arg_9[49:49],
                         {{c$ds_app_arg_9[48:48],   c$ds_app_arg_9[47:47],   c$ds_app_arg_9[46:46],
                       c$ds_app_arg_9[45:45],   c$ds_app_arg_9[44:44],   c$ds_app_arg_9[43:43],
                       c$ds_app_arg_9[42:42],   c$ds_app_arg_9[41:41],   c$ds_app_arg_9[40:40],
                       c$ds_app_arg_9[39:39],   c$ds_app_arg_9[38:38],   c$ds_app_arg_9[37:37],
                       c$ds_app_arg_9[36:36],   c$ds_app_arg_9[35:35],   c$ds_app_arg_9[34:34],
                       c$ds_app_arg_9[33:33],   c$ds_app_arg_9[32:32],   c$ds_app_arg_9[31:31]},c$app_arg_92}};

  assign c$vec_18 = c$ds_app_arg_9[50:31];

  // vector replace begin
  genvar i_12;
  generate
  for (i_12=0;i_12<20;i_12=i_12+1) begin : vector_replace_12
    assign c$app_arg_91[(19-i_12)*1+:1] = (64'sd0) == i_12 ? c$app_arg_92 : c$vec_18[(19-i_12)*1+:1];
  end
  endgenerate
  // vector replace end

  assign c$app_arg_92 = sharedLogic_5 ^ c$ds_app_arg_9[0:0];

  assign c$app_arg_93 = xDone_5 ? (c$ds_app_arg_9[60:51] >> (64'sd1)) : c$ds_app_arg_9[60:51];

  // rotateR begin
  wire [2*10-1:0] bv_12;
  assign bv_12 = {c$ds_app_arg_9[70:61],c$ds_app_arg_9[70:61]} >> ((64'sd1) % 10);
  assign c$app_arg_94 = bv_12[10-1 : 0];
  // rotateR end

  assign c$app_arg_95 = c$case_scrut_5 ? c$case_alt_86 : 2'd2;

  assign c$case_alt_86 = xDone_5 ? 2'd3 : 2'd2;

  assign c$bv_27 = c$ds_app_arg_9[10:1];

  assign xDone_5 = (c$bv_27[(64'sd0)]) == (1'b1);

  assign sharedLogic_5 = aIn_5 ^ bIn_5;

  assign c$bv_28 = (c$ds_app_arg_9[70:61]);

  assign c$bv_29 = (c$ds_app_arg_9[60:51]);

  assign aIn_5 = ( c$bv_28[0] ) & ( c$bv_29[0] );

  assign c$vec_19 = c$ds_app_arg_9[50:31];

  // index lit begin
  assign bIn_5 = c$vec_19[20-1-0*1 -: 1];
  // index lit end

  assign c$bv_30 = c$ds_app_arg_9[30:11];

  assign c$case_scrut_5 = (c$bv_30[(64'sd0)]) == (1'b1);

  assign c$app_arg_96 = c$ds_app_arg_9[30:11] >> (64'sd1);

  assign c$case_alt_87 = start_5 ? {{2'd1,
                                     result_35,   result_34,
                                     c$ds_app_arg_9[50:31],
                                     20'b00000000000100000000,
                                     c$ds_app_arg_9[10:1],   c$ds_app_arg_9[0:0]},
                                    {1'b0,   1'b0}} : {c$ds_app_arg_9,   {1'b0,
                                                                          1'b0}};

  assign start_5 = eta2_4[2:2];

  assign c$din_12 = eta2_4[0:0];

  // replaceBit start
  always @(*) begin
    result_34 = (c$ds_app_arg_9[60:51] >> (64'sd1));
    result_34[(64'sd9)] = c$din_12;
  end
  // replaceBit end

  assign c$din_13 = eta2_4[1:1];

  // replaceBit start
  always @(*) begin
    result_35 = (c$ds_app_arg_9[70:61] >> (64'sd1));
    result_35[(64'sd9)] = c$din_13;
  end
  // replaceBit end

  assign eta2_5 = {selMult == 3'b110,   xBit,
                   yBit};

  // register begin
  always @(posedge clk or  negedge  rst_n) begin : c$ds_app_arg_10_register
    if ( ! rst_n) begin
      c$ds_app_arg_10 <= {2'd0,   12'b000000000000,   12'b000000000000,   {1'b0,   1'b0,   1'b0,   1'b0,
                                                    1'b0,   1'b0,   1'b0,   1'b0,
                                                    1'b0,   1'b0,   1'b0,   1'b0,
                                                    1'b0,   1'b0,   1'b0,   1'b0,
                                                    1'b0,   1'b0,   1'b0,   1'b0,
                                                    1'b0,   1'b0,   1'b0,
                                                    1'b0},
   24'b000000000000000000000000,   12'b000000000000,   1'b0};
    end else if (ena) begin
      c$ds_app_arg_10 <= result_37[88:2];
    end
  end
  // register end

  assign result_36 = result_37[1:0];

  assign result_selection_25 = c$ds_app_arg_10[86:85];

  always @(*) begin
    case(result_selection_25)
      2'b00 : result_37 = c$case_alt_99;
      2'b01 : result_37 = c$case_alt_89;
      2'b10 : result_37 = {{c$app_arg_108,
                            c$app_arg_107,   c$app_arg_106,
                            c$app_arg_101,   c$app_arg_100,
                            c$app_arg_99,   c$app_arg_98},   {1'b0,
                                                              1'b0}};
      default : result_37 = c$case_alt_88;
    endcase
  end

  assign c$case_alt_88 = c$case_scrut_6 ? {{2'd0,
                                            12'b000000000000,   12'b000000000000,
                                            {24 {1'b0}},   24'b000000000000000000000000,
                                            12'b000000000000,   1'b0},   {1'b1,
                                                                          bIn_6}} : {{2'd3,   c$ds_app_arg_10[84:73],
                                                                                      c$ds_app_arg_10[72:61],
                                                                                      c$app_arg_97,   c$app_arg_109,
                                                                                      c$ds_app_arg_10[12:1],
                                                                                      c$ds_app_arg_10[0:0]},   {1'b1,
                                                                                                                bIn_6}};

  assign c$case_alt_89 = c$case_scrut_6 ? {{2'd2,
                                            result_39,   result_38,
                                            c$ds_app_arg_10[60:37],
                                            24'b000000000000100000000000,
                                            12'b100000000000,   c$ds_app_arg_10[0:0]},
                                           {1'b0,   1'b0}} : {{2'd1,   result_39,
                                                               result_38,   c$ds_app_arg_10[60:37],
                                                               c$app_arg_109,   c$ds_app_arg_10[12:1],
                                                               c$ds_app_arg_10[0:0]},   {1'b0,   1'b0}};

  assign c$vec_20 = c$ds_app_arg_10[60:37];

  // rotateLeftS begin
  localparam shift_amount_27 = 1 % 24;

  generate
  if (shift_amount_27 == 0) begin : no_shift_27
    assign c$app_arg_97 = c$vec_20;
  end else begin : do_shift_27
    assign c$app_arg_97 = {c$vec_20[((24-shift_amount_27)*1)-1 : 0]
                     ,c$vec_20[24-1 : (24-shift_amount_27)*1]
                     };
  end
  endgenerate
  // rotateLeftS end

  assign c$app_arg_98 = xDone_6 ? 1'b0 : cOut_6;

  assign c$app_arg_99 = c$case_scrut_6 ? c$case_alt_90 : c$case_alt_91;

  assign c$case_alt_90 = xDone_6 ? 12'b000000000000 : c$case_alt_91;

  // rotateR begin
  wire [2*12-1:0] bv_13;
  assign bv_13 = {c$ds_app_arg_10[12:1],c$ds_app_arg_10[12:1]} >> ((64'sd1) % 12);
  assign c$case_alt_91 = bv_13[12-1 : 0];
  // rotateR end

  assign c$app_arg_100 = c$case_scrut_6 ? c$case_alt_92 : c$case_alt_93;

  assign c$case_alt_92 = xDone_6 ? 24'b100000000000000000000000 : c$ds_app_arg_10[36:13];

  assign c$case_alt_93 = xDone_6 ? c$app_arg_109 : c$ds_app_arg_10[36:13];

  assign c$app_arg_101 = xDone_6 ? c$case_alt_94 : c$case_alt_95;

  assign c$case_alt_94 = c$case_scrut_6 ? c$case_alt_96 : c$case_alt_97;

  // rotateLeftS begin
  localparam shift_amount_28 = 1 % 24;

  generate
  if (shift_amount_28 == 0) begin : no_shift_28
    assign c$case_alt_95 = c$app_arg_104;
  end else begin : do_shift_28
    assign c$case_alt_95 = {c$app_arg_104[((24-shift_amount_28)*1)-1 : 0]
                     ,c$app_arg_104[24-1 : (24-shift_amount_28)*1]
                     };
  end
  endgenerate
  // rotateLeftS end

  // rotateLeftS begin
  localparam shift_amount_29 = 1 % 24;

  generate
  if (shift_amount_29 == 0) begin : no_shift_29
    assign c$case_alt_96 = c$app_arg_102;
  end else begin : do_shift_29
    assign c$case_alt_96 = {c$app_arg_102[((24-shift_amount_29)*1)-1 : 0]
                     ,c$app_arg_102[24-1 : (24-shift_amount_29)*1]
                     };
  end
  endgenerate
  // rotateLeftS end

  // rotateRightS begin
  localparam shift_amount_30 = 11 % 24;

  generate
  if (shift_amount_30 == 0) begin : no_shift_30
    assign c$case_alt_97 = c$app_arg_102;
  end else begin : do_shift_30
    assign c$case_alt_97 = {c$app_arg_102[(shift_amount_30*1)-1 : 0]
                     ,c$app_arg_102[24-1 : shift_amount_30*1]
                     };
  end
  endgenerate
  // rotateRightS end

  // vector replace begin
  genvar i_13;
  generate
  for (i_13=0;i_13<24;i_13=i_13+1) begin : vector_replace_13
    assign c$app_arg_102[(23-i_13)*1+:1] = (64'sd0) == i_13 ? cOut_6 : c$app_arg_103[(23-i_13)*1+:1];
  end
  endgenerate
  // vector replace end

  assign cOut_6 = (c$ds_app_arg_10[0:0] & sharedLogic_6) | (aIn_6 & bIn_6);

  assign c$app_arg_103 = {c$ds_app_arg_10[59:59],
                          {{c$ds_app_arg_10[58:58],   c$ds_app_arg_10[57:57],   c$ds_app_arg_10[56:56],
                        c$ds_app_arg_10[55:55],   c$ds_app_arg_10[54:54],   c$ds_app_arg_10[53:53],
                        c$ds_app_arg_10[52:52],   c$ds_app_arg_10[51:51],   c$ds_app_arg_10[50:50],
                        c$ds_app_arg_10[49:49],   c$ds_app_arg_10[48:48],   c$ds_app_arg_10[47:47],
                        c$ds_app_arg_10[46:46],   c$ds_app_arg_10[45:45],   c$ds_app_arg_10[44:44],
                        c$ds_app_arg_10[43:43],   c$ds_app_arg_10[42:42],   c$ds_app_arg_10[41:41],
                        c$ds_app_arg_10[40:40],   c$ds_app_arg_10[39:39],   c$ds_app_arg_10[38:38],
                        c$ds_app_arg_10[37:37]},c$app_arg_105}};

  assign c$vec_21 = c$ds_app_arg_10[60:37];

  // vector replace begin
  genvar i_14;
  generate
  for (i_14=0;i_14<24;i_14=i_14+1) begin : vector_replace_14
    assign c$app_arg_104[(23-i_14)*1+:1] = (64'sd0) == i_14 ? c$app_arg_105 : c$vec_21[(23-i_14)*1+:1];
  end
  endgenerate
  // vector replace end

  assign c$app_arg_105 = sharedLogic_6 ^ c$ds_app_arg_10[0:0];

  assign c$app_arg_106 = xDone_6 ? (c$ds_app_arg_10[72:61] >> (64'sd1)) : c$ds_app_arg_10[72:61];

  // rotateR begin
  wire [2*12-1:0] bv_14;
  assign bv_14 = {c$ds_app_arg_10[84:73],c$ds_app_arg_10[84:73]} >> ((64'sd1) % 12);
  assign c$app_arg_107 = bv_14[12-1 : 0];
  // rotateR end

  assign c$app_arg_108 = c$case_scrut_6 ? c$case_alt_98 : 2'd2;

  assign c$case_alt_98 = xDone_6 ? 2'd3 : 2'd2;

  assign c$bv_31 = c$ds_app_arg_10[12:1];

  assign xDone_6 = (c$bv_31[(64'sd0)]) == (1'b1);

  assign sharedLogic_6 = aIn_6 ^ bIn_6;

  assign c$bv_32 = (c$ds_app_arg_10[84:73]);

  assign c$bv_33 = (c$ds_app_arg_10[72:61]);

  assign aIn_6 = ( c$bv_32[0] ) & ( c$bv_33[0] );

  assign c$vec_22 = c$ds_app_arg_10[60:37];

  // index lit begin
  assign bIn_6 = c$vec_22[24-1-0*1 -: 1];
  // index lit end

  assign c$bv_34 = c$ds_app_arg_10[36:13];

  assign c$case_scrut_6 = (c$bv_34[(64'sd0)]) == (1'b1);

  assign c$app_arg_109 = c$ds_app_arg_10[36:13] >> (64'sd1);

  assign c$case_alt_99 = start_6 ? {{2'd1,
                                     result_39,   result_38,
                                     c$ds_app_arg_10[60:37],
                                     24'b000000000000010000000000,
                                     c$ds_app_arg_10[12:1],
                                     c$ds_app_arg_10[0:0]},   {1'b0,
                                                               1'b0}} : {c$ds_app_arg_10,   {1'b0,   1'b0}};

  assign start_6 = eta2_5[2:2];

  assign c$din_14 = eta2_5[0:0];

  // replaceBit start
  always @(*) begin
    result_38 = (c$ds_app_arg_10[72:61] >> (64'sd1));
    result_38[(64'sd11)] = c$din_14;
  end
  // replaceBit end

  assign c$din_15 = eta2_5[1:1];

  // replaceBit start
  always @(*) begin
    result_39 = (c$ds_app_arg_10[84:73] >> (64'sd1));
    result_39[(64'sd11)] = c$din_15;
  end
  // replaceBit end

  assign eta2_6 = {selMult == 3'b111,   xBit,
                   yBit};

  // register begin
  always @(posedge clk or  negedge  rst_n) begin : c$ds_app_arg_11_register
    if ( ! rst_n) begin
      c$ds_app_arg_11 <= {2'd0,   16'b0000000000000000,   16'b0000000000000000,   {1'b0,   1'b0,   1'b0,
                                                            1'b0,   1'b0,   1'b0,
                                                            1'b0,   1'b0,   1'b0,
                                                            1'b0,   1'b0,   1'b0,
                                                            1'b0,   1'b0,   1'b0,
                                                            1'b0,   1'b0,   1'b0,
                                                            1'b0,   1'b0,   1'b0,
                                                            1'b0,   1'b0,   1'b0,
                                                            1'b0,   1'b0,   1'b0,
                                                            1'b0,   1'b0,   1'b0,
                                                            1'b0,   1'b0},
   32'b00000000000000000000000000000000,   16'b0000000000000000,   1'b0};
    end else if (ena) begin
      c$ds_app_arg_11 <= result_41[116:2];
    end
  end
  // register end

  assign result_40 = result_41[1:0];

  assign result_selection_28 = c$ds_app_arg_11[114:113];

  always @(*) begin
    case(result_selection_28)
      2'b00 : result_41 = c$case_alt_111;
      2'b01 : result_41 = c$case_alt_101;
      2'b10 : result_41 = {{c$app_arg_121,
                            c$app_arg_120,   c$app_arg_119,
                            c$app_arg_114,   c$app_arg_113,
                            c$app_arg_112,   c$app_arg_111},   {1'b0,
                                                                1'b0}};
      default : result_41 = c$case_alt_100;
    endcase
  end

  assign c$case_alt_100 = c$case_scrut_7 ? {{2'd0,
                                             16'b0000000000000000,   16'b0000000000000000,
                                             {32 {1'b0}},
                                             32'b00000000000000000000000000000000,
                                             16'b0000000000000000,   1'b0},   {1'b1,
                                                                               bIn_7}} : {{2'd3,
                                                                                           c$ds_app_arg_11[112:97],
                                                                                           c$ds_app_arg_11[96:81],
                                                                                           c$app_arg_110,
                                                                                           c$app_arg_122,
                                                                                           c$ds_app_arg_11[16:1],
                                                                                           c$ds_app_arg_11[0:0]},
                                                                                          {1'b1,   bIn_7}};

  assign c$case_alt_101 = c$case_scrut_7 ? {{2'd2,
                                             result_43,   result_42,
                                             c$ds_app_arg_11[80:49],
                                             32'b00000000000000001000000000000000,
                                             16'b1000000000000000,   c$ds_app_arg_11[0:0]},
                                            {1'b0,   1'b0}} : {{2'd1,   result_43,
                                                                result_42,   c$ds_app_arg_11[80:49],
                                                                c$app_arg_122,   c$ds_app_arg_11[16:1],
                                                                c$ds_app_arg_11[0:0]},   {1'b0,   1'b0}};

  assign c$vec_23 = c$ds_app_arg_11[80:49];

  // rotateLeftS begin
  localparam shift_amount_31 = 1 % 32;

  generate
  if (shift_amount_31 == 0) begin : no_shift_31
    assign c$app_arg_110 = c$vec_23;
  end else begin : do_shift_31
    assign c$app_arg_110 = {c$vec_23[((32-shift_amount_31)*1)-1 : 0]
                     ,c$vec_23[32-1 : (32-shift_amount_31)*1]
                     };
  end
  endgenerate
  // rotateLeftS end

  assign c$app_arg_111 = xDone_7 ? 1'b0 : cOut_7;

  assign c$app_arg_112 = c$case_scrut_7 ? c$case_alt_102 : c$case_alt_103;

  assign c$case_alt_102 = xDone_7 ? 16'b0000000000000000 : c$case_alt_103;

  // rotateR begin
  wire [2*16-1:0] bv_15;
  assign bv_15 = {c$ds_app_arg_11[16:1],c$ds_app_arg_11[16:1]} >> ((64'sd1) % 16);
  assign c$case_alt_103 = bv_15[16-1 : 0];
  // rotateR end

  assign c$app_arg_113 = c$case_scrut_7 ? c$case_alt_104 : c$case_alt_105;

  assign c$case_alt_104 = xDone_7 ? 32'b10000000000000000000000000000000 : c$ds_app_arg_11[48:17];

  assign c$case_alt_105 = xDone_7 ? c$app_arg_122 : c$ds_app_arg_11[48:17];

  assign c$app_arg_114 = xDone_7 ? c$case_alt_106 : c$case_alt_107;

  assign c$case_alt_106 = c$case_scrut_7 ? c$case_alt_108 : c$case_alt_109;

  // rotateLeftS begin
  localparam shift_amount_32 = 1 % 32;

  generate
  if (shift_amount_32 == 0) begin : no_shift_32
    assign c$case_alt_107 = c$app_arg_117;
  end else begin : do_shift_32
    assign c$case_alt_107 = {c$app_arg_117[((32-shift_amount_32)*1)-1 : 0]
                     ,c$app_arg_117[32-1 : (32-shift_amount_32)*1]
                     };
  end
  endgenerate
  // rotateLeftS end

  // rotateLeftS begin
  localparam shift_amount_33 = 1 % 32;

  generate
  if (shift_amount_33 == 0) begin : no_shift_33
    assign c$case_alt_108 = c$app_arg_115;
  end else begin : do_shift_33
    assign c$case_alt_108 = {c$app_arg_115[((32-shift_amount_33)*1)-1 : 0]
                     ,c$app_arg_115[32-1 : (32-shift_amount_33)*1]
                     };
  end
  endgenerate
  // rotateLeftS end

  // rotateRightS begin
  localparam shift_amount_34 = 15 % 32;

  generate
  if (shift_amount_34 == 0) begin : no_shift_34
    assign c$case_alt_109 = c$app_arg_115;
  end else begin : do_shift_34
    assign c$case_alt_109 = {c$app_arg_115[(shift_amount_34*1)-1 : 0]
                     ,c$app_arg_115[32-1 : shift_amount_34*1]
                     };
  end
  endgenerate
  // rotateRightS end

  // vector replace begin
  genvar i_15;
  generate
  for (i_15=0;i_15<32;i_15=i_15+1) begin : vector_replace_15
    assign c$app_arg_115[(31-i_15)*1+:1] = (64'sd0) == i_15 ? cOut_7 : c$app_arg_116[(31-i_15)*1+:1];
  end
  endgenerate
  // vector replace end

  assign cOut_7 = (c$ds_app_arg_11[0:0] & sharedLogic_7) | (aIn_7 & bIn_7);

  assign c$app_arg_116 = {c$ds_app_arg_11[79:79],
                          {{c$ds_app_arg_11[78:78],   c$ds_app_arg_11[77:77],   c$ds_app_arg_11[76:76],
                        c$ds_app_arg_11[75:75],   c$ds_app_arg_11[74:74],   c$ds_app_arg_11[73:73],
                        c$ds_app_arg_11[72:72],   c$ds_app_arg_11[71:71],   c$ds_app_arg_11[70:70],
                        c$ds_app_arg_11[69:69],   c$ds_app_arg_11[68:68],   c$ds_app_arg_11[67:67],
                        c$ds_app_arg_11[66:66],   c$ds_app_arg_11[65:65],   c$ds_app_arg_11[64:64],
                        c$ds_app_arg_11[63:63],   c$ds_app_arg_11[62:62],   c$ds_app_arg_11[61:61],
                        c$ds_app_arg_11[60:60],   c$ds_app_arg_11[59:59],   c$ds_app_arg_11[58:58],
                        c$ds_app_arg_11[57:57],   c$ds_app_arg_11[56:56],   c$ds_app_arg_11[55:55],
                        c$ds_app_arg_11[54:54],   c$ds_app_arg_11[53:53],   c$ds_app_arg_11[52:52],
                        c$ds_app_arg_11[51:51],   c$ds_app_arg_11[50:50],   c$ds_app_arg_11[49:49]},c$app_arg_118}};

  assign c$vec_24 = c$ds_app_arg_11[80:49];

  // vector replace begin
  genvar i_16;
  generate
  for (i_16=0;i_16<32;i_16=i_16+1) begin : vector_replace_16
    assign c$app_arg_117[(31-i_16)*1+:1] = (64'sd0) == i_16 ? c$app_arg_118 : c$vec_24[(31-i_16)*1+:1];
  end
  endgenerate
  // vector replace end

  assign c$app_arg_118 = sharedLogic_7 ^ c$ds_app_arg_11[0:0];

  assign c$app_arg_119 = xDone_7 ? (c$ds_app_arg_11[96:81] >> (64'sd1)) : c$ds_app_arg_11[96:81];

  // rotateR begin
  wire [2*16-1:0] bv_16;
  assign bv_16 = {c$ds_app_arg_11[112:97],c$ds_app_arg_11[112:97]} >> ((64'sd1) % 16);
  assign c$app_arg_120 = bv_16[16-1 : 0];
  // rotateR end

  assign c$app_arg_121 = c$case_scrut_7 ? c$case_alt_110 : 2'd2;

  assign c$case_alt_110 = xDone_7 ? 2'd3 : 2'd2;

  assign c$bv_35 = c$ds_app_arg_11[16:1];

  assign xDone_7 = (c$bv_35[(64'sd0)]) == (1'b1);

  assign sharedLogic_7 = aIn_7 ^ bIn_7;

  assign c$bv_36 = (c$ds_app_arg_11[112:97]);

  assign c$bv_37 = (c$ds_app_arg_11[96:81]);

  assign aIn_7 = ( c$bv_36[0] ) & ( c$bv_37[0] );

  assign c$vec_25 = c$ds_app_arg_11[80:49];

  // index lit begin
  assign bIn_7 = c$vec_25[32-1-0*1 -: 1];
  // index lit end

  assign c$bv_38 = c$ds_app_arg_11[48:17];

  assign c$case_scrut_7 = (c$bv_38[(64'sd0)]) == (1'b1);

  assign c$app_arg_122 = c$ds_app_arg_11[48:17] >> (64'sd1);

  assign c$case_alt_111 = start_7 ? {{2'd1,
                                      result_43,   result_42,
                                      c$ds_app_arg_11[80:49],
                                      32'b00000000000000000100000000000000,
                                      c$ds_app_arg_11[16:1],
                                      c$ds_app_arg_11[0:0]},   {1'b0,
                                                                1'b0}} : {c$ds_app_arg_11,   {1'b0,   1'b0}};

  assign start_7 = eta2_6[2:2];

  assign c$din_16 = eta2_6[0:0];

  // replaceBit start
  always @(*) begin
    result_42 = (c$ds_app_arg_11[96:81] >> (64'sd1));
    result_42[(64'sd15)] = c$din_16;
  end
  // replaceBit end

  assign c$din_17 = eta2_6[1:1];

  // replaceBit start
  always @(*) begin
    result_43 = (c$ds_app_arg_11[112:97] >> (64'sd1));
    result_43[(64'sd15)] = c$din_17;
  end
  // replaceBit end

  assign c$vecFlat = {result_12,   result_16,
                      result_20,   result_24,   result_28,
                      result_32,   result_36,   result_40};

  // index begin
  wire [1:0] vecArray [0:8-1];
  genvar i_17;
  generate
  for (i_17=0; i_17 < 8; i_17=i_17+1) begin : mk_array
    assign vecArray[(8-1)-i_17] = c$vecFlat[i_17*2+:2];
  end
  endgenerate
  assign result_44 = vecArray[($unsigned({{(64-3) {1'b0}},selMult}))];
  // index end

  assign a3_0 = result_44[1:1];

  assign a4 = result_44[0:0];

  assign c$app_arg_123 = a3_0 ? 1'b1 : 1'b0;

  assign result_45 = ({(c$app_arg_123),(({((a4)),(6'b000000)}))});

  assign c$ds1_case_alt = b;

  assign c$ds2_case_alt = b_0;

  assign result_46 = {a4_0 == 1'b1,   a3_1,
                      a1_3,   b1_1};

  assign ds_4 = (ui_in);

  assign b = ds_4[6:0];

  assign b_0 = c$ds1_case_alt[5:0];

  assign a4_0 = ds_4[7:7];

  assign a3_1 = c$ds1_case_alt[6:6];

  assign a1_3 = c$ds2_case_alt[5:3];

  assign b1_1 = c$ds2_case_alt[2:0];

  assign c$ds1_case_alt_0 = b_1;

  assign c$ds2_case_alt_0 = b_2;

  assign c$ds3_case_alt = b_3;

  assign result_47 = {ds_5[7:6],
                      c$ds1_case_alt_0[5:3],   a3_2 == 1'b1,   a1_4,
                      b1_2};

  assign ds_5 = (uio_in);

  assign b_1 = ds_5[5:0];

  assign b_2 = c$ds1_case_alt_0[2:0];

  assign b_3 = c$ds2_case_alt_0[1:0];

  assign a3_2 = c$ds2_case_alt_0[2:2];

  assign a1_4 = c$ds3_case_alt[1:1];

  assign b1_2 = c$ds3_case_alt[0:0];

  assign selMult = result_47[5:3];

  assign xBit = result_47[1:1];

  assign yBit = result_47[0:0];

  assign result = {result_11,   result_45,
                   8'b11000000};

  assign uo_out = result[23:16];

  assign uio_out = result[15:8];

  assign uio_oe = result[7:0];


endmodule

